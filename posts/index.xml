<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 墨非默</title>
        <link>https://mix-liten.github.io/posts/</link>
        <description>Recent content in Posts on 墨非默</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-TW</language>
        <lastBuildDate>Sat, 30 Jan 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://mix-liten.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>為你自己學Git-讀書心得-part1</title>
            <link>https://mix-liten.github.io/posts/202101/%E7%82%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%AD%B8git-%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97-part1/</link>
            <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/202101/%E7%82%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%AD%B8git-%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97-part1/</guid>
            <description>前言 上班之餘，抽空翻完作者在 2020 年年初因慶祝某件事情，提供的免費電子書 為你自己學 Git，有件事情必須先說清楚，這本書大部分章節都有放在 宣傳頁 免費觀看，早在前幾年我就有翻這本書的想法，但每次翻了幾頁後又放棄，直到上班一段時間後才吃透這本書，原因是內容生澀難懂，難懂的部分是以前對於書中舉例要解決的狀況不了解，生澀的部分是連指令的用法都不懂，卻介紹指令的背後在做什麼，現在可以吃透自然是有一段時間的使用經驗，遇到過各種狀況，才能披荊斬棘看完。
從我的狀況來評價這本書的幾項要點
  舉例出符合業界常遇到的狀況，並以此為出發點講解如何解決
  解釋指令背後，git 做了哪些事，git 如何做到
總結起來就是，不推薦新手入門看這本書，因新手很大一部分需要的不是如何解決問題及了解原理，而是現在要做什麼
早期我覺得最有幫助的是很常見的   內容概要 這裡並不是全部的 git 指令，只是作為閱讀記錄，說明什麼情況適合使用什麼指令
安裝好之後，使用版本指令檢查
$ git --version 設定本機全域的 git 作者，建議和 GitHub 同步一樣的名稱及信箱，不要亂打，之後都會看到
$ git config --global user.name &amp;#34;username&amp;#34; $ git config --global user.email &amp;#34;username@email.com&amp;#34; 完成後可用指令檢視，這個指令會列出 /User 根目錄中的 .gitconfig 的內容，裡面不只有名稱及信箱，平常不要亂動，特殊情況才會需要手動來調設定
$ git config --list 若有需要在個別專案中設定不同作者，在該專案中設定 local user，注意要先初始化 git init
$ git config --local user.name &amp;#34;local username&amp;#34; $ git config --local user.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>上班之餘，抽空翻完作者在 2020 年年初因慶祝某件事情，提供的免費電子書 <code>為你自己學 Git</code>，有件事情必須先說清楚，這本書大部分章節都有放在 <a href="https://gitbook.tw/" title="為你自己學 Git">宣傳頁</a> 免費觀看，早在前幾年我就有翻這本書的想法，但每次翻了幾頁後又放棄，直到上班一段時間後才吃透這本書，原因是內容生澀難懂，難懂的部分是以前對於書中舉例要解決的狀況不了解，生澀的部分是連指令的用法都不懂，卻介紹指令的背後在做什麼，現在可以吃透自然是有一段時間的使用經驗，遇到過各種狀況，才能披荊斬棘看完。</p>
<p>從我的狀況來評價這本書的幾項要點</p>
<ol>
<li>
<p>舉例出符合業界常遇到的狀況，並以此為出發點講解如何解決</p>
</li>
<li>
<p>解釋指令背後，git 做了哪些事，git 如何做到</p>
<p>總結起來就是，不推薦新手入門看這本書，因新手很大一部分需要的不是如何解決問題及了解原理，而是現在要做什麼</p>
<p>早期我覺得最有幫助的是很常見的 <img src="/images/other/git-command.png" alt="git 流程圖" title="流程圖"></p>
</li>
</ol>
<h2 id="內容概要">內容概要</h2>
<p>這裡並不是全部的 git 指令，只是作為閱讀記錄，說明什麼情況適合使用什麼指令</p>
<p>安裝好之後，使用版本指令檢查</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git --version
</code></pre></div><p>設定本機全域的 git 作者，建議和 GitHub 同步一樣的名稱及信箱，不要亂打，之後都會看到</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --global user.name <span style="color:#e6db74">&#34;username&#34;</span>
$ git config --global user.email <span style="color:#e6db74">&#34;username@email.com&#34;</span>
</code></pre></div><p>完成後可用指令檢視，這個指令會列出 <code>/User</code> 根目錄中的 <code>.gitconfig</code> 的內容，裡面不只有名稱及信箱，平常不要亂動，特殊情況才會需要手動來調設定</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --list
</code></pre></div><p>若有需要在個別專案中設定不同作者，在該專案中設定 local user，注意要先初始化 <code>git init</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --local user.name <span style="color:#e6db74">&#34;local username&#34;</span>
$ git config --local user.email <span style="color:#e6db74">&#34;local.username@email.com&#34;</span>
</code></pre></div><p>使用 <code>alias</code>別名 減少打字字數</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --global alias.co checkout <span style="color:#75715e"># git co</span>
$ git config --global alias.br branch <span style="color:#75715e"># git br</span>
$ git config --global alias.st status <span style="color:#75715e"># git st</span>
$ git config --global alias.l <span style="color:#e6db74">&#34;log --oneline --graph&#34;</span> <span style="color:#75715e"># git l</span>
$ git config --global alias.ls <span style="color:#e6db74">&#39;log --graph --pretty=format:&#34;%h &lt;%an&gt; %ar %s&#34;&#39;</span> <span style="color:#75715e"># git ls</span>
</code></pre></div><p>隱藏功能，讓 Git 紀錄檔案衝突(Conflict)時的解決方法，下次再遇到會自動解決，主要用途有二，其一是讓大型專案的紀錄相對乾淨，其二是一種常見的使用場景，合併進測試分支時，第一次解決衝突後，若分支測試失敗後退版，待到下次在合併時不需再處理已發生過的衝突</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --global rerere.enabled true
</code></pre></div><p>修改預設編輯器</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git config --global core.editor emacs <span style="color:#75715e"># 編輯器改為 emacs，好像沒比較好</span>
<span style="color:#75715e"># 編輯器改為 VSCode，使用絕對位置或 code 已加入環境變數就可以簡短的寫</span>
<span style="color:#75715e"># --wait 參數，作用是可以任意編輯存檔，直到關閉編輯分頁才回傳內容給 git，內容裡使用井字號註解有效，但那有什麼意義?</span>
$ git config --global core.editor <span style="color:#e6db74">&#34;&#39;C:\Program Files\Microsoft VS Code\code.exe&#39; --wait&#34;</span>
$ git config --global core.editor <span style="color:#e6db74">&#34;code --wait&#34;</span>
</code></pre></div><p>vim 簡易操作說明，分 Normal Mode 及 Insert Mode</p>
<p>在 Normal Mode 時，無法直接修改，但可以 Copy、Paste、Save，要注意的一點是，Paste 之後會切換成 Insert Mode</p>
<p>一般有三個按鍵可以從 Normal Mode 切換到 Insert Mode</p>
<ul>
<li><code>i</code>(insert，當前位置切換)</li>
<li><code>a</code>(append，切換到當前位置下一格)</li>
<li><code>o</code>(new line，切換到當前位置下一行)</li>
</ul>
<p>從 Insert Mode 切換到 Normal Mode 就簡單多了，<code>ESC</code>切換即可</p>
<p>存檔及離開 Vim 介面的指令必須在 Normal Mode 使用，<code>:w</code>(存檔)、<code>:q</code>(離開)、<code>:wq</code>(存檔並離開)，如果修改後不想存檔就離開，用<code>:q</code>會被擋住，此時使用<code>:q!</code>(強制離開)</p>
<p>MacOS 根目錄下的 <code>/tmp</code>，重開機時都會清空，適合用來練習一些東西，看需求使用</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add . <span style="color:#75715e"># 當前位置為出發點，以下的所有更動加入暫存</span>
$ git add --all <span style="color:#75715e"># 專案根目錄為出發點，整個專案的所有更動加入暫存</span>
</code></pre></div><p>個人習慣，專案的第一個 Commit 給一個無內容的空節點，提供 <code>-m</code> 參數就不會進到 vim 介面編輯 commit 內容了</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit --allow-empty -m <span style="color:#e6db74">&#34;git init&#34;</span>
</code></pre></div><p>簡化一般先 add 再 commit 的流程，對 Untracked file(通常是新增的檔案) 無效</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit -a -m <span style="color:#e6db74">&#34;update content&#34;</span>
</code></pre></div><p>查詢紀錄指令，以往都用 GUI，紀錄一下，雖然以後應該也沒什麼機會用</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log
$ git log --oneline --graph <span style="color:#75715e"># 拉出地鐵線</span>
$ git log --oneline --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;userA&#34;</span> <span style="color:#75715e"># 搜尋一位特定作者的 commit</span>
$ git log --oneline --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;userA\|userB&#34;</span> <span style="color:#75715e"># 搜尋多位特定作者的 commit</span>
$ git log --oneline --grep<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;WTF&#34;</span> <span style="color:#75715e"># 搜尋 commit 內容包含指定訊息的 commit</span>
$ git log --oneline -S <span style="color:#e6db74">&#34;FormData&#34;</span> <span style="color:#75715e"># 搜尋 commit 修改內容包含指定修改的 commit</span>
$ git log --oneline --since<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;5pm&#34;</span> --until<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8pm&#34;</span> <span style="color:#75715e"># 搜尋 指定時間內的 commit，注意台灣時區是標準時間加八小時，前面範例的下午五點到八點等於台灣時間的早上九點到十二點</span>
$ git log --oneline --since<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;9am&#34;</span> --until<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;12am&#34;</span> --after<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2017-01&#34;</span> <span style="color:#75715e"># 搜尋 2017年1月之後 指定時間內 的 commit</span>
$ git log --oneline --first-parent <span style="color:#75715e"># 只顯示 current branch</span>
</code></pre></div><p>對特定檔案查詢</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log sample.txt <span style="color:#75715e"># 搜尋指定檔案相關的 commit</span>
$ git log -p sample.txt <span style="color:#75715e"># 搜尋指定檔案相關的 commit，並且顯示該 commit 修改了什麼</span>
$ git blame sample.txt <span style="color:#75715e"># 列出指定檔案每一行的 commit 作者、SHA-1 值、日期時間</span>
$ git blame -L 2,4 sample.txt <span style="color:#75715e"># 功用同上，但指定顯示二到四行</span>
</code></pre></div><h3 id="目錄操作使-git-紀錄追蹤改變刪除及替換">目錄操作，使 git 紀錄追蹤改變，刪除及替換</h3>
<ol>
<li>刪除</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 1-1 手動刪除(檔案被刪除)</span>
$ rm sample.txt
$ git add sample.txt
$ git commit -m <span style="color:#e6db74">&#34;remove sample.txt&#34;</span>
<span style="color:#75715e"># 1-2 git 代刪(檔案被刪除)</span>
$ git rm sample.txt
$ git commit -m <span style="color:#e6db74">&#34;git remove sample.txt&#34;</span>
<span style="color:#75715e"># 1-3 git 軟刪(檔案未刪除，但在 git 紀錄中標示已刪)</span>
$ git rm sample.txt --cached
$ git commit -m <span style="color:#e6db74">&#34;soft remove sample.txt&#34;</span>
</code></pre></div><ol start="2">
<li>更名</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 2-1 手動</span>
$ mv sample.txt <span style="color:#66d9ef">case</span>.txt
$ git add --all
$ git commit -m <span style="color:#e6db74">&#34;rename sample.txt to case.txt&#34;</span>
<span style="color:#75715e"># 2-2 git 代理</span>
$ git mv sample.txt <span style="color:#66d9ef">case</span>.txt
$ git commit -m <span style="color:#e6db74">&#34;git rename sample.txt to case.txt&#34;</span>
</code></pre></div><p>修改 commit 內容，使用 <code>--amend</code> 參數，只能修改最後一次，注意此方法會產生新的 SHA-1 值，代表是新的 commit，而不是修改原本的 commit</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># before</span>
$ git log --oneline
<span style="color:#ae81ff">4879515</span> WTF
7dbc437 add hello.html
abb4f43 update index page
cef6e40 create index page
cc797cd init commit
<span style="color:#75715e"># use --amend</span>
$ git commit --amend -m <span style="color:#e6db74">&#34;hotfix God bless you&#34;</span>
<span style="color:#75715e"># after</span>
$ git log --oneline
614a90c hotfix God bless you
7dbc437 add hello.html
abb4f43 update index page
cef6e40 create index page
cc797cd init commit
</code></pre></div><p>使用 <code>--amend</code> 參數時，如果有修改放在暫存區，會一起被合進新的 commit 裡，可搭配 <code>--no-edit</code> 參數，效果是不改訊息直接 commit，適用在漏合或短時間內修改，但千萬不要用在已推到 remote 的修改</p>
<p>因 git 版控主要針對<code>檔案的內容</code>，所以空的資料夾不能直接加入版控，<code>慣例</code>的作法是在資料夾裡新增 <code>.keep</code> 或 <code>.gitkeep</code> 檔案</p>
<p><code>.gitignore</code>，忽略特定檔案，<a href="https://github.com/github/gitignore" title="github/gitignore">各語言基礎忽略範例</a></p>
<pre><code>sample.html # 忽略所有檔名為 sample.html 的檔案
*.tmp # 忽略所有附檔名是 .tmp 的檔案
/db/*.sqlite3 # 忽略所有 db ⽬錄下附檔名是 .sqlite3 的檔案
</code></pre><p>注意一點，如果忽略的檔案在建立 <code>.gitignore</code> 之前就存在版控裡的話，要使用 <code>git rm --cached</code>，否則會不如預期
有點危險的操作</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add -f sample.html <span style="color:#75715e"># 強制通關，忽略你的忽略</span>
$ git clean -fX <span style="color:#75715e"># 大寫 X，將所有被指定忽略的檔案強制刪除</span>
$ git clean -fx <span style="color:#75715e"># 小寫 x，將所有不被追蹤的檔案強制刪除</span>
$ git clean -nx <span style="color:#75715e"># 小寫 x，列出所有不被追蹤、預計被刪除的檔案</span>
</code></pre></div><h3 id="反悔操作">反悔操作</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git checkout sample.html <span style="color:#75715e"># 將指定檔案復原到未修改前，可清除修改和回復刪除狀態</span>
$ git checkout . <span style="color:#75715e"># 將所有修改復原 commit 的狀態，包含修改和刪除狀態</span>
$ git checkout HEAD~2 . <span style="color:#75715e"># 將所有修改回復到兩個 commit 前的狀態</span>
$ git reset HEAD^ <span style="color:#75715e"># 回到上一個 commit</span>
$ git reset HEAD^^ <span style="color:#75715e"># 回到上兩個 commit</span>
$ git reset HEAD~2 <span style="color:#75715e"># 回到上兩個 commit</span>
$ git reset @~2 <span style="color:#75715e"># @ 符號是 HEAD 的 Alias</span>
$ git reset 85e7e30 <span style="color:#75715e"># 回到指定的 commit，但要合理</span>
$ git reset 85e7e30^ <span style="color:#75715e"># 回到指定 commit 的上一個 commit</span>
$ git revert HEAD^ --no-edit <span style="color:#75715e"># 還原上一個 commit，此方法會建立新的 commit 宣告，多人合作時，較為禮貌的做法</span>
</code></pre></div><p>其中 <code>git reset</code> 指令有三種模式，反悔過程為 A 點到 B 點中間的所有修改</p>
<ol>
<li><code>--mixed</code>
預設，反悔過程中的修改會回到工作目錄區</li>
<li><code>-soft</code>
反悔過程中的修改會回到暫存區</li>
<li><code>--hard</code>
反悔過程中的修改全部刪除
強制刪除若要再反悔，使用 <code>git reflog</code> / <code>git log -g</code> 指令檢視 <code>HEAD</code> 移動紀錄，看 Commit 的訊息找到想要的版本 SHA-1 值，再使用 <code>git reset 版本SHA-1 --hard</code> 指令回復，注意紀錄內容預設只保留三十天
另外有個冷知識，<code>HEAD^^</code> 和 <code>HEAD~2</code> 有微妙的不同，<code>HEAD~2</code> 只能指向 current branch 的 current commit 的往前第二個 commit，而 <code>HEAD^^</code> 其實是省略寫法，完整版是 <code>HEAD^1^1</code>，如果 current commit 是一個 merge 的節點，使用 <code>HEAD^2^1</code>會移動到被合併分支的倒數第二個節點，如果 merge 節點合了五個分支，則指向最後一個被合的分支就是 <code>HEAD^5</code>，基本上用 GUI 時，完全不需要這種冷知識啦</li>
</ol>
<h3 id="將個別檔案的指定修改放入暫存">將個別檔案的指定修改放入暫存</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add -p sample.html
<span style="color:#75715e"># 輸入後會列出所有修改並詢問接下來的動作</span>
<span style="color:#75715e"># Stage this hunk [y,n,q,a,d,e,?]?</span>
<span style="color:#75715e"># 輸入問號並 Enter，解釋每一個指令的用途</span>
<span style="color:#75715e"># 這裡要用的是 e(edit)，進入 Vim 或指定編輯器，刪除不想加入暫存的部分，關閉分頁，暫存區就會放入剛剛剩下的修改</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>為你自己學Git-讀書心得-part2</title>
            <link>https://mix-liten.github.io/posts/202101/%E7%82%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%AD%B8git-%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97-part2/</link>
            <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/202101/%E7%82%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%AD%B8git-%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97-part2/</guid>
            <description>前言 接續前一篇，直接進入紀錄的部分。
分支相關指令 # 列出 local 分支 $ git branch # 列出 remote 分支 $ git branch -r # 等於 --remote # 列出 local + remote 分支 $ git branch -a # 開新分支 $ git branch branch_name # 在指定 commit 的位置開新分支 $ git branch branch_name 657fce7 # 更名分支 $ git branch -m old_name new_name # 刪除分支，若該分支內容未備份於其他分支會給予提示並且不可刪除，此時使用大寫 -D 以強制刪除 $ git branch -d branch_name # 切換分支 $ git checkout branch_name # 存在分支則切換分支，不存在分支則新建分支並切換分支 $ git checkout -b branch_name # 在指定 commit 的位置，存在分支則切換分支，不存在分支則新建分支並切換分支 $ git checkout -b branch_name 657fce7 # 切換到遠端分支時會發生 detached HEAD 狀態，使用追蹤參數在 local 建立追蹤分支，即可解決 $ git checkout -t origin/branch_name # 等於 --track # 回復分支，紀錄或找到被刪除分支最新 commit 的 SHA-1 值則可回復 $ git branch branch_name b174a5a # 列出所有節點紀錄，等同於 GUI 線圖 $ git show-branch -a # 強制遷移 master branch 到指定位置，HEAD 要先移到其他位置，忘開分支就 commit 時可能有用 $ git branch -f master e12d8ef 合併分支相關 # 合併分支時，如果原分支比對要被合進來的分支，發現根莖相同，用線圖來看就是仍在一直線上，會啟用 快轉模式(Fast Forward)，效果看起來是只平移原分支 # 合併分支時，如果原分支比對要被合進來的分支，發現根莖不相同，線圖類似 Y 形分岔，合併時會產生新的 commit，作為合併紀錄點，若發生 衝突(Conflict) 也會一併解決 # 使用以下指令可以總是產生分岔合併節點，即使刪除已合併過的分支，也可以在線圖上知道這裡曾經合併過 $ git merge branch_name --no-ff # 重設基礎合併，此方法會將當前分支的每個 commit 照順序嫁接到指定的分支上 $ git rebase branch_name # 此為危險操作，可用 Reflog 指令找到危險操作前最新 commit 的 SHA-1 值，並且執行 Reset 指令回復 # 或是使用危險操作皆有的額外紀錄點 ORIG_HEAD，執行 Reset 指令回復 $ git reset ORIG_HEAD --hard # rebase 指令進行時，若發生 衝突(Conflict)，處理方式和 merge 不同，此時看線圖會看到 HEAD 節點正卡出狀況的新移植節點上，此時將衝突解決，之後執行以下指令繼續 rebase $ git rebase --continue # 若衝突發生點不是文字檔而是圖片或其他二進位檔 $ git checkout --ours sample.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>接續前一篇，直接進入紀錄的部分。</p>
<h3 id="分支相關指令">分支相關指令</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 列出 local 分支</span>
$ git branch
<span style="color:#75715e"># 列出 remote 分支</span>
$ git branch -r <span style="color:#75715e"># 等於 --remote</span>
<span style="color:#75715e"># 列出 local + remote 分支</span>
$ git branch -a
<span style="color:#75715e"># 開新分支</span>
$ git branch branch_name
<span style="color:#75715e"># 在指定 commit 的位置開新分支</span>
$ git branch branch_name 657fce7
<span style="color:#75715e"># 更名分支</span>
$ git branch -m old_name new_name
<span style="color:#75715e"># 刪除分支，若該分支內容未備份於其他分支會給予提示並且不可刪除，此時使用大寫 -D 以強制刪除</span>
$ git branch -d branch_name
<span style="color:#75715e"># 切換分支</span>
$ git checkout branch_name
<span style="color:#75715e"># 存在分支則切換分支，不存在分支則新建分支並切換分支</span>
$ git checkout -b branch_name
<span style="color:#75715e"># 在指定 commit 的位置，存在分支則切換分支，不存在分支則新建分支並切換分支</span>
$ git checkout -b branch_name 657fce7
<span style="color:#75715e"># 切換到遠端分支時會發生 detached HEAD 狀態，使用追蹤參數在 local 建立追蹤分支，即可解決</span>
$ git checkout -t origin/branch_name <span style="color:#75715e"># 等於 --track</span>
<span style="color:#75715e"># 回復分支，紀錄或找到被刪除分支最新 commit 的 SHA-1 值則可回復</span>
$ git branch branch_name b174a5a
<span style="color:#75715e"># 列出所有節點紀錄，等同於 GUI 線圖</span>
$ git show-branch -a
<span style="color:#75715e"># 強制遷移 master branch 到指定位置，HEAD 要先移到其他位置，忘開分支就 commit 時可能有用</span>
$ git branch -f master e12d8ef
</code></pre></div><h4 id="合併分支相關">合併分支相關</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 合併分支時，如果原分支比對要被合進來的分支，發現根莖相同，用線圖來看就是仍在一直線上，會啟用 快轉模式(Fast Forward)，效果看起來是只平移原分支</span>
<span style="color:#75715e"># 合併分支時，如果原分支比對要被合進來的分支，發現根莖不相同，線圖類似 Y 形分岔，合併時會產生新的 commit，作為合併紀錄點，若發生 衝突(Conflict) 也會一併解決</span>
<span style="color:#75715e"># 使用以下指令可以總是產生分岔合併節點，即使刪除已合併過的分支，也可以在線圖上知道這裡曾經合併過</span>
$ git merge branch_name --no-ff
<span style="color:#75715e"># 重設基礎合併，此方法會將當前分支的每個 commit 照順序嫁接到指定的分支上</span>
$ git rebase branch_name
<span style="color:#75715e"># 此為危險操作，可用 Reflog 指令找到危險操作前最新 commit 的 SHA-1 值，並且執行 Reset 指令回復</span>
<span style="color:#75715e"># 或是使用危險操作皆有的額外紀錄點 ORIG_HEAD，執行 Reset 指令回復</span>
$ git reset ORIG_HEAD --hard
<span style="color:#75715e"># rebase 指令進行時，若發生 衝突(Conflict)，處理方式和 merge 不同，此時看線圖會看到 HEAD 節點正卡出狀況的新移植節點上，此時將衝突解決，之後執行以下指令繼續 rebase</span>
$ git rebase --continue
<span style="color:#75715e"># 若衝突發生點不是文字檔而是圖片或其他二進位檔</span>
$ git checkout --ours sample.jpg <span style="color:#75715e"># 保留原分支檔</span>
$ git checkout --theirs sample.jpg <span style="color:#75715e"># 保留被合分支檔</span>
<span style="color:#75715e"># rebase 互動模式(interactively)，開啟編輯器，編輯每筆 commit 前的動作，關閉後再逐筆修改需要再編輯的 commit</span>
<span style="color:#75715e"># 動作分別有，p(pick，預設，表使用該 commit)、r(reword，修改 commit message)、e(edit，停在該節點進 amend 流程)、s(squash，粉碎 commit，合到前一個 commit)、f(fixup，效果同 s，但不保留 commit message)、d(drop，移除 commit)</span>
<span style="color:#75715e"># 編輯動作時可直接調整順序，若整行刪除等同於 d 動作</span>
<span style="color:#75715e"># 常用狀況舉例，使用 s 動作處理多合一，使用 e 動作處理一分多(reset 之後，增加多筆 commit)</span>
$ git rebase -i 657fce7
</code></pre></div><h4 id="標籤相關">標籤相關</h4>
<p>分兩種類型，輕量標籤(lightweight tag)，適用於個人標記；有附註標籤(annotated tag)，適用於版本發布</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 新增輕量標籤在當前 commit</span>
$ git tag tag_name
<span style="color:#75715e"># 新增輕量標籤在指定 commit</span>
$ git tag tag_name 51d54ff
<span style="color:#75715e"># 新增有附註標籤在指定 commit，-a 表要附註解，-m 效果同 commit 時</span>
$ git tag tag_name 51d54ff -a -m <span style="color:#e6db74">&#34;Big Cats are comming&#34;</span>
<span style="color:#75715e"># 刪除標籤</span>
$ git tag -d tag_name
<span style="color:#75715e"># 顯示 commit 紀錄，any_point 可代入 標籤名 / SHA-1 值</span>
$ git show any_point
</code></pre></div><h4 id="暫存相關">暫存相關</h4>
<p>可先 commit，之後再 reset 拆掉繼續做，或是使用 stash 指令放入暫存</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 新增暫存</span>
$ git stash
<span style="color:#75715e"># 新增暫存，連同 Untracked 的檔案</span>
$ git stash -u
<span style="color:#75715e"># 列出所有暫存，暫存訊息有預設格式，在哪個 branch + 當時在哪個 commit</span>
$ git stash list
stash@<span style="color:#f92672">{</span>0<span style="color:#f92672">}</span>: WIP on branch_a: 053fb21 branch_a_latest_commit_message
stash@<span style="color:#f92672">{</span>1<span style="color:#f92672">}</span>: WIP on branch_b: b174a5a branch_b_latest_commit_message
<span style="color:#75715e"># 取出暫存，不指定第幾個暫存則預設取編號最小</span>
$ git stash apply stash@<span style="color:#f92672">{</span>1<span style="color:#f92672">}</span>
<span style="color:#75715e"># 刪除暫存</span>
$ git stash drop stash@<span style="color:#f92672">{</span>1<span style="color:#f92672">}</span>
<span style="color:#75715e"># 取出並刪除暫存，等同於 apply + drop</span>
$ git stash pop stash@<span style="color:#f92672">{</span>1<span style="color:#f92672">}</span>
</code></pre></div><h4 id="撿其他-branch-的-commit">撿其他 branch 的 commit</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 合併進當前位置</span>
$ git cherry-pick 6a498ec
<span style="color:#75715e"># 合併進當前位置，可一次撿多個，依順序</span>
$ git cherry-pick fd23e1c 6a498ec f4f4442
<span style="color:#75715e"># 撿過來但先不合併</span>
$ git cherry-pick 6a498ec --no-commit
</code></pre></div><h3 id="重要資料進版控移除方法">重要資料進版控，移除方法</h3>
<ol>
<li>軟刪除，還是有辦法復原</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 讓所有 commit 執行指定命令，刪除重要資料</span>
$ git filter-branch --tree-filter <span style="color:#e6db74">&#34;rm -f config/database.yml&#34;</span>
<span style="color:#75715e"># 復原</span>
$ git reset refs/original/refs/heads/master --hard
</code></pre></div><ol start="2">
<li>徹底刪除</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 讓所有 commit 執行指定命令，刪除重要資料</span>
$ git filter-branch -f --tree-filter <span style="color:#e6db74">&#34;rm -f config/database.yml&#34;</span>
<span style="color:#75715e"># 刪除執行 filter-branch 產生的還原點</span>
$ rm .git/refs/original/refs/heads/master
<span style="color:#75715e"># 清除 Reflog 流程，強制讓紀錄過期，之後手動執行回收機制</span>
$ git reflog expire --all --expire<span style="color:#f92672">=</span>now
<span style="color:#75715e"># 前一行已讓紀錄過期，檢視過期的未追蹤檔</span>
<span style="color:#75715e"># 不加 --unreachable 則檢視所有待過期項目，包含 commit、tree、blob 物件等等</span>
<span style="color:#75715e"># 加 --no-reflogs 則額外檢視目前只存在於 Reflog 中的待過期項目</span>
<span style="color:#75715e"># 待過期項目有兩種狀態，Unreachable、Dangling，大部分會是 Unreachable，此狀態表示該項目在當前保留節點的周圍；Dangling 則表示完全與當前節點無關項目</span>
<span style="color:#75715e"># 舉例來說，A -&gt; B -&gt; C -&gt; D，reset 後兩個節點，剩下 A -&gt; B，此時 C 的狀態是 Unreachable，D 則是 Dangling</span>
$ git fsck --unreachable
<span style="color:#75715e"># 執行回收機制</span>
$ git gc --prune<span style="color:#f92672">=</span>now <span style="color:#75715e"># 等同於 git gc &amp; git prune --expire=now</span>
<span style="color:#75715e"># 若已推到 remote 則強制覆蓋</span>
$ git push -f
</code></pre></div><h3 id="remote-相關">remote 相關</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 增加 remote，origin 是慣例用詞，代表遠端，可任意命名，最後一長串是遠端伺服器的連線位置</span>
$ git remote add origin git@github.com:GitHub_id/repository_name.git
<span style="color:#75715e"># 從 local 推到 remote，此時是將 local 的 master branch 推到 remote 的 master branch</span>
<span style="color:#75715e"># 參數 -u(--set-upstream)，設定 local 端分支的上游，會 追蹤(track) 並默認為推送目標，設定一次之後，下次推送只要 git push，每個分支只有一個上游</span>
$ git push -u origin master
<span style="color:#75715e"># 上面的推送指令拿掉參數等同於下面的指令</span>
$ git push origin master:master <span style="color:#75715e"># 最後的分支名對應 local branch:remote branch，可以讓 remote 用不同名字</span>
<span style="color:#75715e"># 強制推送，少用</span>
$ git push -f
<span style="color:#75715e"># 取得遠端更新內容</span>
$ git fetch
<span style="color:#75715e"># 偽更新 local</span>
$ git pull <span style="color:#75715e"># 實際等同於 git fetch &amp; git merge</span>
<span style="color:#75715e"># 偽更新 local，改用 rebase</span>
$ git pull --rebase
<span style="color:#75715e"># 檢視所有 remote 資訊</span>
$ git remote -v
<span style="color:#75715e"># 刪除遠端分支</span>
$ git push origin :branch_name <span style="color:#75715e"># 概念大概是推一個空的分支到遠端</span>
<span style="color:#75715e"># 複製 remote 專案</span>
$ git clone git@github.com:sample_user/project_name.git
<span style="color:#75715e"># 複製 remote 專案，並在 local 用不同的資料夾名</span>
$ git clone git@github.com:sample_user/project_name.git new_project_name
</code></pre></div><h3 id="fork">fork</h3>
<p>fork 其他人的專案時，為同步原專案最新進度，進行以下流程</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 增加 remote，upstream 名為慣例用詞</span>
$ git remote add upstream git@github.com:GitHub_id/repository_name.git
<span style="color:#75715e"># 取得遠端更新內容</span>
$ git fetch upstream
<span style="color:#75715e"># 合併遠端分支</span>
$ git merge upstream/master
<span style="color:#75715e"># 更新 fork 過來的專案</span>
$ git push origin master
</code></pre></div><h3 id="更新檔-相關">更新檔 相關</h3>
<p>產生 patch 檔案，從來沒用過</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 範例 git log</span>
$ git log --oneline
6e6ed76 <span style="color:#f92672">(</span>HEAD -&gt; master<span style="color:#f92672">)</span> add product page
6aba968 update info.html
fd7cd38 <span style="color:#f92672">(</span>origin/master, origin/HEAD<span style="color:#f92672">)</span> Update about.html
2eb8fea add readme
953cbd9 update info page
<span style="color:#75715e"># 產生更新檔，指定範圍，有點像 slice</span>
$ git format-patch fd7cd38..6e6ed76
0001-update-info.html.patch
0002-add-product-page.patch
<span style="color:#75715e"># 產生更新檔，指定區間，-2 代表最新兩筆 commit</span>
$ git format-patch -2
0001-update-info.html.patch
0002-add-product-page.patch
<span style="color:#75715e"># 產生更新檔，-o 參數指定輸出位置</span>
$ git format-patch -2 -o /tmp/patches
/tmp/patches/0001-update-info.html.patch
/tmp/patches/0002-add-product-page.patch
<span style="color:#75715e"># 使用更新檔</span>
$ git am /tmp/patches/*
</code></pre></div><h4 id="git-flowhttpsnviecompostsa-successful-git-branching-model-原文最早於-2010-年提出"><a href="https://nvie.com/posts/a-successful-git-branching-model/" title="原文最早於 2010 年提出">Git Flow</a></h4>
<ol>
<li>master
穩定、可上線的版本，更新只能從別的分支合併過來，通常會加版本標籤</li>
<li>develop
開發主幹，新增功能時從這裡切 feature branch 出去，完成後再合回來</li>
<li>hotfix
線上版本緊急修復，從 master 切出去，完成後合到 master、develop</li>
<li>release
上線前的測試分支，從 develop 切出或合併，測完後合到 master、develop，要合到 develop 是因為有些狀況要到 production 環境才會遇到，修復後合回開發分支避免之後再遇到</li>
<li>feature
新功能分支，從 develop 切出，完成後合回 develop</li>
</ol>
<h4 id="二分法除錯">二分法除錯</h4>
<p>適用在大範圍 commit，不確定何時開始出錯的狀況</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 開始執行二分法，執行這行後，HEAD 會跳到兩點正中間的 commit</span>
$ git bisect start 起始點 結束點
$ git bisect start HEAD f6b72af
<span style="color:#75715e"># 確認該 commit 是否已出問題</span>
$ git bisect good <span style="color:#75715e"># 沒問題，執行這行，再跳到 HEAD 和 第一個中間點中間</span>
$ git bisect bad <span style="color:#75715e"># 有問題，執行這行，再跳到 f6b72af 和 第一個中間點中間，若找到出問題的 commit 就結束流程</span>
<span style="color:#75715e"># 中途放棄流程</span>
$ git bisect reset
</code></pre></div><p>建立新目錄的分支，此方法適用於正在跑 CI/CD 流程時，仍想處理其他需求的狀況，Git v2.6.0 以上才有</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git worktree add -b cat ../copycat
<span style="color:#75715e"># 此方法會再與專案同一層的位置建立目錄，最後一樣可以合併回來，處理完後，新的目錄即可刪除</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>在-macOS-上使用-Homebrew-安裝&amp;更新-git</title>
            <link>https://mix-liten.github.io/posts/201912/%E5%9C%A8-macos-%E4%B8%8A%E4%BD%BF%E7%94%A8-homebrew-%E5%AE%89%E8%A3%9D-%E6%9B%B4%E6%96%B0-git/</link>
            <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201912/%E5%9C%A8-macos-%E4%B8%8A%E4%BD%BF%E7%94%A8-homebrew-%E5%AE%89%E8%A3%9D-%E6%9B%B4%E6%96%B0-git/</guid>
            <description>前言 作為寫程式必備的版控軟體，macOS上預設是有安裝的，那為什麼我還要多此一舉，用 Homebrew 再安裝一次呢？ 因為有時候作為開源軟體的 Git 會修正一些嚴重的漏洞或是有重要更新，這時候參考這篇文章就可以立刻跟上最新版本囉～
指令 直接上指令表，視情況使用。
# 安裝 brew install git # 更新 brew upgrade git # 切換 Git 指令使用 Homebrew 版本 brew link git # 切換 PATH 亦可切換為自行安裝的版本 export PATH=/usr/local/bin:$PATH # 查看 Git 版本指令 git version # 查看目前使用的 Git 的存放位置 which git 結語 老實說我目前不管是在開發 Side-Project 或是公司專案，在使用 Git 的部分都沒遇到什麼問題，更新都是求心安。</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>作為寫程式必備的版控軟體，macOS上預設是有安裝的，那為什麼我還要多此一舉，用 <a href="https://brew.sh/">Homebrew</a> 再安裝一次呢？
因為有時候作為開源軟體的 Git 會修正一些嚴重的漏洞或是有重要更新，這時候參考這篇文章就可以立刻跟上最新版本囉～</p>
<h2 id="指令">指令</h2>
<p>直接上指令表，視情況使用。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH"><span style="color:#75715e"># 安裝</span>
brew install git

<span style="color:#75715e"># 更新</span>
brew upgrade git

<span style="color:#75715e"># 切換 Git 指令使用 Homebrew 版本</span>
brew link git

<span style="color:#75715e"># 切換 PATH 亦可切換為自行安裝的版本</span>
export PATH<span style="color:#f92672">=</span>/usr/local/bin:$PATH

<span style="color:#75715e"># 查看 Git 版本指令</span>
git version

<span style="color:#75715e"># 查看目前使用的 Git 的存放位置</span>
which git
</code></pre></div><h2 id="結語">結語</h2>
<p>老實說我目前不管是在開發 Side-Project 或是公司專案，在使用 Git 的部分都沒遇到什麼問題，更新都是求心安。</p>
]]></content>
        </item>
        
        <item>
            <title>在-macOS-上建立-Laradock-環境</title>
            <link>https://mix-liten.github.io/posts/201912/%E5%9C%A8-macos-%E4%B8%8A%E5%BB%BA%E7%AB%8B-laradock-%E7%92%B0%E5%A2%83/</link>
            <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201912/%E5%9C%A8-macos-%E4%B8%8A%E5%BB%BA%E7%AB%8B-laradock-%E7%92%B0%E5%A2%83/</guid>
            <description>前言 Laradock 是一款簡單食用的APP一種輕鬆簡便安裝 Laravel 環境的開源專案，相較於官網提供的 Homestead 虛擬機在更新版本的不便以及過多用不到的配置，Laradock 提供了更多的自由度且同時有 Docker 開箱即用的便利性。
以下篇幅可能略長，但大多是在建置時可能會遇到的問題，沒遇到問題可直接略過該步驟，另外其實大多數步驟在 Windows 系統也可以比照辦理。
步驟  安裝 Docker  下載前要先註冊會員，下載後打開應用登入運行就可以不管它了。
安裝 Laradock  打開 CMD 或同等功用的 Command Line，依照下方範例逐行執行
cd ~/Documents/Laravel git clone https://github.com/Laradock/laradock.git cd laradock cp env-example .env 第一行 cd 進入的位置 可任意更換為你想要放 Laradock 專案的位置 第四行 cp 即是 複製 env-example 並更名為 .env
修改 .env 檔  APP_CODE_PATH_HOST=~/Documents/PHPProject 後方位置請設定為預備要映射進虛擬機裡的放置專案的資料夾
MYSQL_VERSION=5.7 MySQL 預設的版本是 latest，但這會有個延伸問題，如果你真想要用最新版本的 MySQL，就再多做一個步驟 於 laradock/mysql/my.cnf 新增下面這一行並儲存
default_authentication_plugin=mysql_native_password 建立 Laravel 專案  cd ~/Documents/PHPProject laravel new testProject 如果出現錯誤說無法識別 laravel 指令，請參考官方文件安裝 laravel/installer</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p><a href="https://laradock.io/">Laradock</a> 是<del>一款簡單食用的APP</del>一種輕鬆簡便安裝 Laravel 環境的開源專案，相較於官網提供的 <a href="https://laravel.com/docs/6.x/homestead">Homestead 虛擬機</a>在更新版本的不便以及過多用不到的配置，Laradock 提供了<code>更多的自由度</code>且同時有 Docker <code>開箱即用的便利性</code>。</p>
<p>以下篇幅可能略長，但大多是在建置時可能會遇到的問題，沒遇到問題可直接略過該步驟，另外其實大多數步驟在 Windows 系統也可以比照辦理。</p>
<h2 id="步驟">步驟</h2>
<ol>
<li>安裝 <a href="https://docs.docker.com/docker-for-mac/install/">Docker</a></li>
</ol>
<p>下載前要先註冊會員，下載後打開應用登入運行就可以不管它了。</p>
<ol start="2">
<li>安裝 <a href="https://laradock.io/">Laradock</a></li>
</ol>
<p>打開 CMD 或同等功用的 Command Line，依照下方範例逐行執行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">cd ~/Documents/Laravel
git clone https://github.com/Laradock/laradock.git
cd laradock
cp env-example .env
</code></pre></div><p>第一行 cd 進入的位置 <code>可任意更換為你想要放 Laradock 專案的位置</code>
第四行 cp 即是 <code>複製 env-example 並更名為 .env</code></p>
<ol start="3">
<li>修改 <code>.env</code> 檔</li>
</ol>
<pre><code>APP_CODE_PATH_HOST=~/Documents/PHPProject
</code></pre><p>後方位置請設定為預備要映射進虛擬機裡的放置專案的資料夾</p>
<pre><code>MYSQL_VERSION=5.7
</code></pre><p>MySQL 預設的版本是 latest，但這會有個延伸問題，如果你真想要用最新版本的 MySQL，就再多做一個步驟
於 <code>laradock/mysql/my.cnf</code> 新增下面這一行並儲存</p>
<pre><code>default_authentication_plugin=mysql_native_password
</code></pre><ol start="4">
<li>建立 Laravel 專案</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">cd ~/Documents/PHPProject
laravel new testProject
</code></pre></div><p>如果出現錯誤說無法識別 laravel 指令，請參考<a href="https://laravel.com/docs/6.x">官方文件</a>安裝 <code>laravel/installer</code></p>
<p>接著修改修改該專案的 <code>.env</code> 檔</p>
<pre><code class="language-ENV" data-lang="ENV">DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=testDatabase
DB_USERNAME=default
DB_PASSWORD=secret
</code></pre><p>這個連資料庫的帳號是 Laradock 運行 MySQL image 時建立的一般用戶，也可更換為資料庫中開通所有權力的帳戶，<code>DB_USERNAME</code> 及 <code>DB_PASSWORD</code> 皆為 <code>root</code></p>
<ol start="5">
<li>設定 nginx 站點</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">cd ~/Documents/Laravel/laradock/nginx/sites
cp laravel.conf.example laravel.test.conf
</code></pre></div><p>接著用文字編輯器打開 <code>laravel.test.conf</code> 並修改</p>
<pre><code>server_name test.com;
root /var/www/testProject/public;
</code></pre><p>請自行替換自己想要的網址於 <code>server_name</code>，以及替換專案名稱</p>
<ol start="6">
<li>註冊虛擬主機別名</li>
</ol>
<p>macOS使用者 請於 <code>Finder</code> 的 <code>前往/前往檔案夾...</code> 輸入 <code>/private/etc/hosts</code>
之後複製 hosts 檔至 Desktop，並以文字編輯器在其中新增下方內容，最後貼回去覆蓋掉 <code>/private/etc/hosts</code></p>
<pre><code>127.0.0.1 test.com
</code></pre><ol start="7">
<li>安裝並運行虛擬機</li>
</ol>
<p>先確定 cmd 目前位置在 laradock 專案中，接著運行下方指令，然後等待一段時間讓它安裝虛擬機</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">docker-compose up -d nginx mysql
</code></pre></div><ol start="8">
<li>進入 MySQL image 建立專案所用的資料庫</li>
</ol>
<p>進入 MySQL image</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">docker-compose exec mysql bash
</code></pre></div><p>登入資料庫並建立資料庫</p>
<pre><code>mysql --user=&quot;root&quot; --password=&quot;root&quot;
CREATE DATABASE `testDatabase`;
</code></pre><p>離開資料庫及 image 的方式皆為 <code>exit</code></p>
<ol start="9">
<li>進入運行中的 container 執行專案的資料庫遷移</li>
</ol>
<p>進入 container</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">docker-compose exec workspace bash
</code></pre></div><p>執行遷移</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">cd testProject
php artisan migrate
</code></pre></div><ol start="10">
<li>測試網站是否建立成功</li>
</ol>
<p>瀏覽器網址輸入：<a href="http://test.com/">http://test.com/</a></p>
<ol start="11">
<li>關閉運行中的 container</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-BASH" data-lang="BASH">docker-compose stop
</code></pre></div><h2 id="結語">結語</h2>
<p>步驟七可能會受到網速影響，順利的話，應該可以在一小時內建置完成。
有問題可留言詢問，或是自行餵狗。</p>
]]></content>
        </item>
        
        <item>
            <title>Vue with Storybook 概述</title>
            <link>https://mix-liten.github.io/posts/201911/storybook_with_vue/</link>
            <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201911/storybook_with_vue/</guid>
            <description>前言 現在前端流行的框架都可單獨開發多種元件，在元件切得很多的情況下，使用 Storybook 檢視各個元件，相信會在開發上給予相當程度的便利。
目前 Storybook 可用於 React、Vue、Angular、Svelte、Ember、&amp;hellip;等等框架，本篇以 Vue 為例，版本是5.1。
連結  Storybook vue-cli-plugin-storybook storybook-addon-vue-info storybook-addon-vue-info-demo  安裝 Storybook 官網裡安裝 Vue 版本的方法有兩種
 Automatic setup 在 Vue 專案裡使用下方指令  npx -p @storybook/cli sb init --type vue Manual setup 這個比較麻煩，就是照著步驟做，為了避免篇幅過長，僅提供傳送門。
  Vue CLI plugin 別人造好的輪子，使用方式是先開啟 Vue CLI 3 新增的圖形化介面，進入你要使用的專案，選擇目錄中的插件(Plugins)，點擊新增插件後安裝vue-cli-plugin-storybook
  配置及插件(Addons) 安裝好後，使用 package.json 裡的相關指令把 Storybook 跑起來 此時你會發現，自己跑起來的 Storybook 與官網的影片相差甚遠，主要有兩部分，一是左邊的目錄很空，這是因為我們還沒配置要呈現的 story，二是右邊的元件控制項很少，這是另一項重點，插件(Addons)。
首先配置的部分，這是一個很多工的步驟，以官方給的 Button 範例說明，程式部分僅供參考，實際使用要看 Storybook 的版本
// Button.stories.js import { storiesOf } from &amp;#39;@storybook/vue&amp;#39; import { action } from &amp;#39;@storybook/addon-actions&amp;#39; import { withKnobs } from &amp;#34;@storybook/addon-knobs&amp;#34; const stories = storiesOf(&amp;#34;Button&amp;#34;, module) stories.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>現在前端流行的框架都可單獨開發多種元件，在元件切得很多的情況下，使用 Storybook 檢視各個元件，相信會在開發上給予相當程度的便利。</p>
<p>目前 Storybook 可用於 <a href="https://storybook.js.org/docs/guides/guide-react/">React</a>、<a href="https://storybook.js.org/docs/guides/guide-vue/">Vue</a>、<a href="https://storybook.js.org/docs/guides/guide-angular/">Angular</a>、<a href="https://storybook.js.org/docs/guides/guide-svelte/">Svelte</a>、<a href="https://storybook.js.org/docs/guides/guide-ember/">Ember</a>、&hellip;等等框架，本篇以 Vue 為例，版本是5.1。</p>
<h2 id="連結">連結</h2>
<ol>
<li><a href="https://storybook.js.org/">Storybook</a></li>
<li><a href="https://www.npmjs.com/package/vue-cli-plugin-storybook">vue-cli-plugin-storybook</a></li>
<li><a href="https://www.npmjs.com/package/storybook-addon-vue-info">storybook-addon-vue-info</a></li>
<li><a href="https://storybook-addon-vue-info.netlify.com/">storybook-addon-vue-info-demo</a></li>
</ol>
<h2 id="安裝">安裝</h2>
<p>Storybook 官網裡安裝 Vue 版本的方法有兩種</p>
<ol>
<li>Automatic setup
在 Vue 專案裡使用下方指令</li>
</ol>
<pre><code>npx -p @storybook/cli sb init --type vue
</code></pre><ol start="2">
<li>
<p>Manual setup
這個比較麻煩，就是照著步驟做，為了避免篇幅過長，僅提供<a href="https://storybook.js.org/docs/guides/guide-vue/#manual-setup">傳送門</a>。</p>
</li>
<li>
<p>Vue CLI plugin
別人造好的輪子，使用方式是先開啟 Vue CLI 3 新增的圖形化介面，進入你要使用的專案，選擇目錄中的插件(Plugins)，點擊新增插件後安裝<a href="https://www.npmjs.com/package/vue-cli-plugin-storybook">vue-cli-plugin-storybook</a></p>
</li>
</ol>
<h2 id="配置及插件addons">配置及插件(Addons)</h2>
<p>安裝好後，使用 package.json 裡的相關指令把 Storybook 跑起來
<img src="/images/other/storybook/storybook_demo.jpg" alt="官方首頁Demo">
此時你會發現，自己跑起來的 Storybook 與官網的影片相差甚遠，主要有兩部分，一是左邊的目錄很空，這是因為我們還沒配置要呈現的 story，二是右邊的元件控制項很少，這是另一項重點，插件(Addons)。</p>
<p>首先配置的部分，這是一個很多工的步驟，以官方給的 Button 範例說明，程式部分僅供參考，實際使用要看 Storybook 的版本</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Button.stories.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">storiesOf</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;@storybook/vue&#39;</span>
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">action</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;@storybook/addon-actions&#39;</span>
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">withKnobs</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@storybook/addon-knobs&#34;</span>

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">stories</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">storiesOf</span>(<span style="color:#e6db74">&#34;Button&#34;</span>, <span style="color:#a6e22e">module</span>)
<span style="color:#a6e22e">stories</span>.<span style="color:#a6e22e">addDecorator</span>(<span style="color:#a6e22e">withKnobs</span>)

<span style="color:#a6e22e">stories</span>
  .<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#39;Button&#39;</span>, () =&gt; ({
    <span style="color:#a6e22e">template</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&lt;button :handle-click=&#34;log&#34;&gt;Click me to log the action&lt;/button&gt;&#39;</span>,
    <span style="color:#a6e22e">methods</span><span style="color:#f92672">:</span> {
      <span style="color:#a6e22e">log</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">action</span>(<span style="color:#e6db74">&#39;log&#39;</span>),
    },
  }))
</code></pre></div><p>在這段範例中，首先要建一個 story 的主體，接著往裡面增加內容，中間配置了 knobs 的插件，如果要用全域插件也可以在 config.js 裡使用以下這段</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">addDecorator</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;@storybook/vue&#39;</span>
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">withInfo</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;storybook-addon-vue-info&#39;</span>
<span style="color:#a6e22e">addDecorator</span>(<span style="color:#a6e22e">withInfo</span>)
</code></pre></div><ul>
<li>如果要在目錄呈現階層關係，只要在 add 的第一個參數使用斜線(slash)，ex:&lsquo;Button/Pure&rsquo;。</li>
</ul>
<p>插件部分有分<a href="https://storybook.js.org/addons/">Official addons</a>以及自製的，從 Button.stories.js 的範例中可看出元件加進故事裡的 template 是直接放字串或是引入元件檔，此時預設的插件無法提供足夠的資訊，因此我使用了 storybook-addon-vue-info 套件，這個套件可以清晰的顯示出提示訊息、元件樣板、需要傳入的 props 等等。</p>
<h2 id="總結">總結</h2>
<p>這篇只有簡單的介紹，以及我遇到問題的部分，還有很多眉角要注意，另外也要因應各個專案的需求不同配置。
再次重申，請注意 Storybook 的版本。</p>
]]></content>
        </item>
        
        <item>
            <title>遷移 VSCode 的設定與套件</title>
            <link>https://mix-liten.github.io/posts/201908/%E9%81%B7%E7%A7%BBvscode%E7%9A%84%E8%A8%AD%E5%AE%9A%E8%88%87%E5%A5%97%E4%BB%B6/</link>
            <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201908/%E9%81%B7%E7%A7%BBvscode%E7%9A%84%E8%A8%AD%E5%AE%9A%E8%88%87%E5%A5%97%E4%BB%B6/</guid>
            <description>前言 此為將開發環境轉移至 Ｍacbook Pro 的 macOS Mojave 10.14.6 版作業系統時使用的設定與套件文檔。
使用方法 複製 setting，找到設定右上的小圖示開啟 JSON 格式的設定，貼上並儲存即可。 另存一個 extensions.json 檔，並存進 .vscode 名稱的資料夾，之後拉到 VSCode 左側的工作區，之後到擴充應用區挑要用到的套件。
setting.json { /* 編輯器內建功能設定 */ &amp;#34;editor.multiCursorModifier&amp;#34;: &amp;#34;ctrlCmd&amp;#34;, // 按著Ctrl並點擊不同位置進行多選  &amp;#34;editor.snippetSuggestions&amp;#34;: &amp;#34;top&amp;#34;, // 輸入時，自動format，調整格式  &amp;#34;editor.formatOnPaste&amp;#34;: false, // 貼上時，自動format，調整格式  &amp;#34;editor.formatOnSave&amp;#34;: false, // 存檔時，自動format，調整格式  &amp;#34;editor.wordWrap&amp;#34;: &amp;#34;on&amp;#34;, // 單行過長時，換行顯示而不是顯示ScrollBar  &amp;#34;editor.fontFamily&amp;#34;: &amp;#34;Operator Mono, Menlo, Monaco, &amp;#39;Courier New&amp;#39;, monospace&amp;#34;, // 編輯器字體  &amp;#34;editor.fontSize&amp;#34;: 18, // 字體大小  &amp;#34;editor.tabSize&amp;#34;: 2, // 一個tab等於兩個space  &amp;#34;editor.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>此為將開發環境轉移至 Ｍacbook Pro 的 macOS Mojave 10.14.6 版作業系統時使用的設定與套件文檔。</p>
<h2 id="使用方法">使用方法</h2>
<p>複製 setting，找到設定右上的小圖示開啟 JSON 格式的設定，貼上並儲存即可。
另存一個 <code>extensions.json</code> 檔，並存進 <code>.vscode</code> 名稱的資料夾，之後拉到 VSCode 左側的工作區，之後到擴充應用區挑要用到的套件。</p>
<h2 id="settingjson">setting.json</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">{
  <span style="color:#75715e">/* 編輯器內建功能設定 */</span>
  <span style="color:#e6db74">&#34;editor.multiCursorModifier&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;ctrlCmd&#34;</span>, <span style="color:#75715e">// 按著Ctrl並點擊不同位置進行多選
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.snippetSuggestions&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;top&#34;</span>, <span style="color:#75715e">// 輸入時，自動format，調整格式
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.formatOnPaste&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 貼上時，自動format，調整格式
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.formatOnSave&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 存檔時，自動format，調整格式
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.wordWrap&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;on&#34;</span>, <span style="color:#75715e">// 單行過長時，換行顯示而不是顯示ScrollBar
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.fontFamily&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Operator Mono, Menlo, Monaco, &#39;Courier New&#39;, monospace&#34;</span>, <span style="color:#75715e">// 編輯器字體
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.fontSize&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">18</span>, <span style="color:#75715e">// 字體大小
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.tabSize&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>, <span style="color:#75715e">// 一個tab等於兩個space
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.rulers&#34;</span><span style="color:#f92672">:</span> [
    <span style="color:#ae81ff">80</span>,
    <span style="color:#ae81ff">120</span>
  ], <span style="color:#75715e">// 在80~120字的地方畫線提醒字數不要太多
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;editor.fontLigatures&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// 字體緊密
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;window.zoomLevel&#34;</span><span style="color:#f92672">:</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#75715e">// 縮放比例
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;explorer.confirmDelete&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 在目錄刪除檔案時，是否需要再次確認
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;workbench.startupEditor&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;newUntitledFile&#34;</span>, <span style="color:#75715e">// IDE啟動時，目錄無工作項目則自動開新空白文件
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;extensions.ignoreRecommendations&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 延伸套件的通知是否不再顯示
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;emmet.triggerExpansionOnTab&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// 固定開啟，必定展開Emmet縮寫
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;emmet.syntaxProfiles&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;javascript&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;html&#34;</span>, <span style="color:#75715e">// 在javascript裡可以使用html的相關設定，如Emmet
</span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#34;vue&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;html&#34;</span>
  },
  <span style="color:#e6db74">&#34;emmet.includeLanguages&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;blade&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;html&#34;</span>, <span style="color:#75715e">// 在不支援某些語法的檔名裡加入特定語言支持
</span><span style="color:#75715e"></span>    <span style="color:#e6db74">&#34;vue&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;html&#34;</span>
  },
  <span style="color:#e6db74">&#34;terminal.external.osxExec&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;iTerm.app&#34;</span>, <span style="color:#75715e">// 終端使用iterm2
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;terminal.integrated.shell.osx&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;zsh&#34;</span>, <span style="color:#75715e">// 終端使用zsh介面
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;terminal.integrated.fontFamily&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;SauceCodePro Nerd Font&#34;</span>, <span style="color:#75715e">// 終端字體
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;terminal.integrated.cursorStyle&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;underline&#34;</span>, <span style="color:#75715e">// 終端目前位置用底線表示
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;terminal.integrated.cursorBlinking&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// 終端目前位置閃爍
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;php.suggest.basic&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 停用VSCode內建提示
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/* 外掛相關設定 */</span>
  <span style="color:#e6db74">&#34;liveServer.settings.donotShowInfoMsg&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// IDE主題
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;vetur.format.defaultFormatter.html&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;js-beautify-html&#34;</span>, <span style="color:#75715e">// 讓vue檔可以format
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;vetur.format.styleInitialIndent&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// 讓vue檔&lt;style&gt;裡的第一行縮排
</span><span style="color:#75715e"></span>  <span style="color:#e6db74">&#34;vetur.format.scriptInitialIndent&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
  <span style="color:#e6db74">&#34;[html]&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;editor.defaultFormatter&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;HookyQR.beautify&#34;</span>
  },
  <span style="color:#e6db74">&#34;[javascript]&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;editor.defaultFormatter&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;HookyQR.beautify&#34;</span>
  },
  <span style="color:#e6db74">&#34;workbench.iconTheme&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;vscode-icons&#34;</span>,
  <span style="color:#e6db74">&#34;editor.suggestSelection&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;first&#34;</span>,
  <span style="color:#e6db74">&#34;vsintellicode.modify.editor.suggestSelection&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;automaticallyOverrodeDefaultValue&#34;</span>,
  <span style="color:#e6db74">&#34;workbench.colorTheme&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;One Dark Pro&#34;</span>,
}
</code></pre></div><h2 id="extensionsjson">extensions.json</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">{
  <span style="color:#e6db74">&#34;recommendations&#34;</span><span style="color:#f92672">:</span> [
    <span style="color:#e6db74">&#34;formulahendry.auto-rename-tag&#34;</span>,
    <span style="color:#e6db74">&#34;hookyqr.beautify&#34;</span>,
    <span style="color:#e6db74">&#34;CoenraadS.bracket-pair-colorizer&#34;</span>,
    <span style="color:#e6db74">&#34;ms-ceintl.vscode-language-pack-zh-hant&#34;</span>,
    <span style="color:#e6db74">&#34;msjsdiag.debugger-for-chrome&#34;</span>,
    <span style="color:#e6db74">&#34;editorconfig.editorconfig&#34;</span>,
    <span style="color:#e6db74">&#34;dsznajder.es7-react-js-snippets&#34;</span>,
    <span style="color:#e6db74">&#34;dbaeumer.vscode-eslint&#34;</span>,
    <span style="color:#e6db74">&#34;donjayamanne.githistory&#34;</span>,
    <span style="color:#e6db74">&#34;oderwat.indent-rainbow&#34;</span>,
    <span style="color:#e6db74">&#34;onecentlin.laravel-extension-pack&#34;</span>,
    <span style="color:#e6db74">&#34;ritwickdey.liveserver&#34;</span>,
    <span style="color:#e6db74">&#34;zhuangtongfa.material-theme&#34;</span>,
    <span style="color:#e6db74">&#34;christian-kohler.path-intellisense&#34;</span>,
    <span style="color:#e6db74">&#34;octref.vetur&#34;</span>,
    <span style="color:#e6db74">&#34;visualstudioexptteam.vscodeintellicode&#34;</span>,
    <span style="color:#e6db74">&#34;robertohuertasm.vscode-icons&#34;</span>,
  ]
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>免費線上MongoDB</title>
            <link>https://mix-liten.github.io/posts/201908/%E5%85%8D%E8%B2%BB%E7%B7%9A%E4%B8%8Amongodb/</link>
            <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201908/%E5%85%8D%E8%B2%BB%E7%B7%9A%E4%B8%8Amongodb/</guid>
            <description>前言 覺得作品不錯，想放在網上公開，但又不想花錢，除了找免費的伺服器外，有時候還需要資料庫，這篇文章告訴你如何註冊、使用免費的線上MongoDB。
連結  MongoDB Atlas MongoDB Atlas Docs  使用步驟   註冊帳號   建立 Cluster 每個 Project 可以免費建一個 0.5GB 的 Cluster，選好雲端平台、選擇有帶藍色標籤的伺服器，確認 Cluster Tier 選擇的是 M0 Sandbox，Cluster Name 填入名稱後，點擊 Create Cluster。   前置設定 此時會有新用戶教學，跟著提示框設定資料庫的使用者、可連線IP、載入範例資料   連線 資料存進資料庫就是要拿出來用的，回到 Cluster 列表頁，選擇要用的 Cluster，點擊 CONNECT，點擊 Connect Your Application，選擇你要使用的語言，複製連線路徑。
  mongodb+srv://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;cluster&amp;gt;.gcp.mongodb.net/&amp;lt;database&amp;gt;?retryWrites=true&amp;amp;w=majority // &amp;lt;user&amp;gt; 使用者名稱 // &amp;lt;password&amp;gt; 使用者密碼，需自行填入 // &amp;lt;database&amp;gt; 使用的資料庫，預設是test </description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>覺得作品不錯，想放在網上公開，但又不想花錢，除了找免費的伺服器外，有時候還需要資料庫，這篇文章告訴你如何註冊、使用免費的線上MongoDB。</p>
<h2 id="連結">連結</h2>
<ol>
<li><a href="https://www.mongodb.com/cloud/atlas">MongoDB Atlas</a></li>
<li><a href="https://docs.atlas.mongodb.com/">MongoDB Atlas Docs</a></li>
</ol>
<h2 id="使用步驟">使用步驟</h2>
<ol>
<li>
<p>註冊帳號
<img src="/images/other/mongoAtlas/register.jpg" alt="填寫信箱、姓名、密碼"></p>
</li>
<li>
<p>建立 Cluster
每個 Project 可以免費建一個 0.5GB 的 Cluster，選好雲端平台、選擇有帶藍色標籤的伺服器，確認 Cluster Tier 選擇的是 M0 Sandbox，Cluster Name 填入名稱後，點擊 Create Cluster。
<img src="/images/other/mongoAtlas/createCluster.jpg" alt="建立 Cluster"></p>
</li>
<li>
<p>前置設定
此時會有新用戶教學，跟著提示框設定資料庫的使用者、可連線IP、載入範例資料
<img src="/images/other/mongoAtlas/menu.jpg" alt="登入後目錄"></p>
</li>
<li>
<p>連線
資料存進資料庫就是要拿出來用的，回到 Cluster 列表頁，選擇要用的 Cluster，點擊 CONNECT，點擊 Connect Your Application，選擇你要使用的語言，複製連線路徑。</p>
</li>
</ol>
<pre><code>mongodb+srv://&lt;user&gt;:&lt;password&gt;@&lt;cluster&gt;.gcp.mongodb.net/&lt;database&gt;?retryWrites=true&amp;w=majority
// &lt;user&gt; 使用者名稱
// &lt;password&gt; 使用者密碼，需自行填入
// &lt;database&gt; 使用的資料庫，預設是test
</code></pre><p><img src="/images/other/mongoAtlas/connect.jpg" alt="取得連線字串"></p>
]]></content>
        </item>
        
        <item>
            <title>Vuex入門 Part2</title>
            <link>https://mix-liten.github.io/posts/201907/vuex%E5%85%A5%E9%96%80-part2/</link>
            <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201907/vuex%E5%85%A5%E9%96%80-part2/</guid>
            <description>前言 系列文(?)的第二篇，本篇會以參考三的語法表為主軸，文中範例的環境是以 Vue CLI 以上來說明，可參考Vuex_Todo範例幫助理解。
參考  四張動圖解釋何時該用Redux Vuex官方文件 Vuex語法表 EventBus  語法(三步驟說明)  使用第一步，把 Vuex 加進 Vue 的實例裡  // main.js, CLI import Vue from &amp;#39;vue&amp;#39; import Vuex from &amp;#39;vuex&amp;#39; import store from &amp;#39;./store&amp;#39; // Vuex 實例  Vue.use(Vuex) // 等同於 Vue.prototype.$store = Vuex; 讓所有元件都可藉由 this.$store 使用 vuex  new Vue({ el: &amp;#39;#app&amp;#39;, store }) // with script src, 偶爾在 codepen 上寫寫 Demo 用 // 照順序引入 Vue, Vuex 的 CDN // 建立 Vuex 實例 var store = new Vuex.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>系列文(?)的第二篇，本篇會以<a href="#%E5%8F%83%E8%80%83">參考三</a>的語法表為主軸，文中範例的環境是以 Vue CLI 以上來說明，可參考<a href="https://github.com/Mix-Liten/vuex_todo">Vuex_Todo範例</a>幫助理解。</p>
<h2 id="參考">參考</h2>
<ol>
<li><a href="https://segmentfault.com/a/1190000012142449">四張動圖解釋何時該用Redux</a></li>
<li><a href="https://vuex.vuejs.org/zh/">Vuex官方文件</a></li>
<li><a href="https://vuejs-tips.github.io/vuex-cheatsheet/">Vuex語法表</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/state-management.html">EventBus</a></li>
</ol>
<h2 id="語法三步驟說明">語法(三步驟說明)</h2>
<ol>
<li>使用第一步，把 Vuex 加進 Vue 的實例裡</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// main.js, CLI
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Vue</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vue&#39;</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Vuex</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vuex&#39;</span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">store</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./store&#39;</span> <span style="color:#75715e">// Vuex 實例
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">Vue</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">Vuex</span>) <span style="color:#75715e">// 等同於 Vue.prototype.$store = Vuex; 讓所有元件都可藉由 this.$store 使用 vuex
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span>({
  <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
  <span style="color:#a6e22e">store</span>
})

<span style="color:#75715e">// with script src, 偶爾在 codepen 上寫寫 Demo 用
</span><span style="color:#75715e">// 照順序引入 Vue, Vuex 的 CDN
</span><span style="color:#75715e">// 建立 Vuex 實例
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">store</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vuex</span>.<span style="color:#a6e22e">Store</span>({
  <span style="color:#a6e22e">state</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">dataList</span><span style="color:#f92672">:</span> []
  },
  ...
})

<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span>({
  <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
  <span style="color:#a6e22e">store</span>,
  <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> ...,
  <span style="color:#a6e22e">computed</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">dataList</span>() {
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$store</span>.<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">dataList</span>;
    },
    ...
  },
  ...
})
</code></pre></div><ol start="2">
<li>使用第二步，建立 Vuex 實例</li>
</ol>
<ul>
<li><a href="https://vuex.vuejs.org/guide/modules.html#namespacing">namespaced說明</a></li>
<li><a href="https://blog.hinablue.me/vuejs-vuex-2-0-guan-yu-plugins-de-shi-qing/">plugins說明</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// store.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Vuex</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vuex&#39;</span>

<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vuex</span>.<span style="color:#a6e22e">Store</span>({
<span style="color:#a6e22e">strict</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#75715e">// 嚴格限制只能通過 mutation 更改 state, 可在開發時確保資料流, 正式環境應關閉
</span><span style="color:#75715e"></span><span style="color:#a6e22e">namespaced</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 命名空間的啟用/停用, module 專用, 幫資料和方法取名總有靈感枯竭的狀況, 使用說明參考上方namespaced說明連結
</span><span style="color:#75715e"></span><span style="color:#a6e22e">modules</span><span style="color:#f92672">:</span> {}, <span style="color:#75715e">// 載入子層資料, 如 store.js 載入 user.js, user.js 再載入 post.js, 形成 store/user/post的關係
</span><span style="color:#75715e"></span><span style="color:#a6e22e">state</span><span style="color:#f92672">:</span> {}, <span style="color:#75715e">// 等同於 Vue 的 data, 放預設資料的地方
</span><span style="color:#75715e"></span><span style="color:#a6e22e">getters</span><span style="color:#f92672">:</span> {}, <span style="color:#75715e">// 等同於 Vue 的 computed, 回傳加工過的資料
</span><span style="color:#75715e"></span><span style="color:#a6e22e">mutations</span><span style="color:#f92672">:</span> {}, <span style="color:#75715e">// 類似於 Vue 的 methods, 負責更改 state, 只能使用同步操作
</span><span style="color:#75715e"></span><span style="color:#a6e22e">actions</span><span style="color:#f92672">:</span> {}, <span style="color:#75715e">// 類似於 Vue 的 methods, 異步(ex:發 API 取資料)會集中在這裡處理，發 commit 到 mutation 更改 state
</span><span style="color:#75715e"></span><span style="color:#a6e22e">plugins</span><span style="color:#f92672">:</span> [], <span style="color:#75715e">// 類似於 Vue 的 watch, 初始化時會在 created 後執行一遍, 使用說明參考上方plugins說明連結
</span><span style="color:#75715e"></span><span style="color:#a6e22e">devtools</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#75715e">// 使 Vue.js devtools 忽略這個 store
</span><span style="color:#75715e"></span>})
</code></pre></div><ul>
<li><a href="https://vuex.vuejs.org/zh/api/#api-%E5%8F%82%E8%80%83">屬性細項說明</a></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// vuex 屬性下放的方法有設定一些參數
</span><span style="color:#75715e"></span><span style="color:#a6e22e">Vuex</span>.<span style="color:#a6e22e">Store</span>({
  <span style="color:#a6e22e">state</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">num</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>,
  },
  <span style="color:#a6e22e">mutations</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">counter</span>(<span style="color:#a6e22e">state</span>, <span style="color:#a6e22e">payload</span>) {
      <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">num</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">payload</span>; <span style="color:#75715e">// padload 為可選參數, 不限制型別, 傳遞更改 state 前需要的運算值
</span><span style="color:#75715e"></span>    }
  },
  <span style="color:#a6e22e">actions</span><span style="color:#f92672">:</span> {
    <span style="color:#75715e">/*
</span><span style="color:#75715e">    context 物件解構後包含以下屬性
</span><span style="color:#75715e">    {
</span><span style="color:#75715e">      state,      // 等同於  store.state, 若在 module 中則為局部 state, 也就是只取得到自己及載入的 module 的資料
</span><span style="color:#75715e">      rootState,  // 等同於 store.state, module 專用, 用來取得父層資料
</span><span style="color:#75715e">      commit,     // 等同於 store.commit, 要求 mutation 更改資料
</span><span style="color:#75715e">      dispatch,   // 等同於 store.dispatch, 觸發其他 action
</span><span style="color:#75715e">      getters,    // 等同於 store.getters, 取得 getter 處理過的資料
</span><span style="color:#75715e">      rootGetters // 等同於 store.getters, module 專用, 用來取得父層 getters
</span><span style="color:#75715e">    }
</span><span style="color:#75715e">    */</span>
    <span style="color:#a6e22e">calculator</span>(<span style="color:#a6e22e">context</span>, <span style="color:#a6e22e">payload</span>) {
      <span style="color:#75715e">// do something ...
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">commit</span>(<span style="color:#e6db74">&#39;counter&#39;</span>, <span style="color:#a6e22e">payload</span>); <span style="color:#75715e">// 要求 counter mutation 更改 state
</span><span style="color:#75715e"></span>    }
  },
  <span style="color:#a6e22e">getters</span><span style="color:#f92672">:</span> {
    <span style="color:#75715e">/*
</span><span style="color:#75715e">    getter 在父層中可傳入兩個參數
</span><span style="color:#75715e">    第一是 state, 取得當前 store 的 state
</span><span style="color:#75715e">    第二是 getters, 取得其他 getter 輔助計算
</span><span style="color:#75715e">
</span><span style="color:#75715e">    getter 在 module 中可傳入四個參數
</span><span style="color:#75715e">    第一是 state, 取得當前 store 的 state
</span><span style="color:#75715e">    第二是 getters, 取得其他 getter 輔助計算
</span><span style="color:#75715e">    第三是 rootState, 取得父層 state
</span><span style="color:#75715e">    第四是 rootGetters, 取得父層 getters 輔助計算
</span><span style="color:#75715e">    */</span>
    <span style="color:#a6e22e">getNum</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">state</span>, <span style="color:#a6e22e">getters</span>) =&gt; {
      <span style="color:#75715e">// do something ...
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">num</span>;
    }
  }
})
</code></pre></div><ol start="3">
<li>使用第三步，元件使用 Vuex
方法有二：</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// 第一，已使用過 Vue.use(Vuex)，可通過 this.$store 使用
</span><span style="color:#75715e"></span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
  <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">computed</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">getTodos</span>() {
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$store</span>.<span style="color:#a6e22e">getters</span>.<span style="color:#a6e22e">doneTodosCount</span>;
    }
    <span style="color:#75715e">// 因應 Namespace 的使用狀況
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">getCounter</span>() {
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$store</span>.<span style="color:#a6e22e">moduleName</span>.<span style="color:#a6e22e">getters</span>.<span style="color:#a6e22e">counterCount</span>;
    }
  }
}
<span style="color:#75715e">// 第二，使用 Vuex 提供的輔助方法，{ mapState, mapGetters, mapActions, mapMutations }
</span><span style="color:#75715e">// mapActions, 把 this.incrementBy(amount) 映射為 this.$store.dispatch(&#39;incrementBy&#39;, amount)`
</span><span style="color:#75715e">// mapMutations, 把 this.incrementBy(amount) 映射為 this.$store.commit(&#39;incrementBy&#39;, amount)`
</span><span style="color:#75715e">// 因應 Namespace 的使用狀況, dispatch 與 commit 可帶第三個參數為 { root: true }, 用途等同於 root 開頭的那幾個, 於 module 中使用
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">mapGetters</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vuex&#39;</span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
  <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">computed</span><span style="color:#f92672">:</span> {
    ...<span style="color:#a6e22e">mapGetters</span>([ <span style="color:#75715e">// 把 this.firstGetter 映射為 this.$store.getters.firstGetter
</span><span style="color:#75715e"></span>      <span style="color:#e6db74">&#39;firstGetter&#39;</span>, <span style="color:#75715e">// 等同於 firstGetter: &#39;firstGetter&#39;
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">anotherGetter</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;secondGetter&#39;</span>, <span style="color:#75715e">// 或是取個比較好懂的名稱
</span><span style="color:#75715e"></span>      <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>    ]),
    <span style="color:#75715e">// 因應 Namespace 的使用狀況
</span><span style="color:#75715e"></span>    ...<span style="color:#a6e22e">mapGetters</span>([
      <span style="color:#e6db74">&#39;paraentName/fourthGetter&#39;</span>
    ]),
    ...<span style="color:#a6e22e">mapGetters</span>(<span style="color:#e6db74">&#39;LevelOne/LevelTwo/LevelThree&#39;</span>, [
      <span style="color:#e6db74">&#39;thirdGetter&#39;</span>
    ]),
  }
}
</code></pre></div><h2 id="其他">其他</h2>
<p>Vuex 還有很多細節是兩篇文章講不完的，麻煩自己到官方文件看，這邊還要介紹一個好用的功能，註冊/卸載 module，用法類似 Vue 的 mixin，重點在於動態、重用，不過記得要在 beforeDestroy 時把 module 和監聽事件一起卸載掉。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// 註冊
</span><span style="color:#75715e"></span><span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">registerModule</span>(<span style="color:#e6db74">&#39;myModule&#39;</span>, {
  <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>})
<span style="color:#75715e">// with Namespace nested/myModule
</span><span style="color:#75715e"></span><span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">registerModule</span>([<span style="color:#e6db74">&#39;nested&#39;</span>, <span style="color:#e6db74">&#39;myModule&#39;</span>], {
  <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>})
<span style="color:#75715e">// 卸載
</span><span style="color:#75715e"></span><span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">unregisterModule</span>(<span style="color:#e6db74">&#39;myModule&#39;</span>)
</code></pre></div><h2 id="結語">結語</h2>
<p>雖然 Vuex 還在更新，但我不會再更新這篇文章，使用上的觀念不會變。
如果你看到這邊覺得暫時用不到 Vuex，可看<a href="#%E5%8F%83%E8%80%83">參考四</a>的 EventBus，可以不用管這堆麻煩的使用方式，開新檔建立新的 Vue 實例，在需要共用資料的元件引入並共用這個實例的 data、methods&hellip;等等，也能暫時解決問題，但資料越多越難管理。</p>
]]></content>
        </item>
        
        <item>
            <title>Vuex入門 Part1</title>
            <link>https://mix-liten.github.io/posts/201907/vuex%E5%85%A5%E9%96%80-part1/</link>
            <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201907/vuex%E5%85%A5%E9%96%80-part1/</guid>
            <description>前言 Vuex 是 Vue.js 的一種狀態管理模式(工具)，其他前端框架也有類似的管理工具，用來解決多個元件共用資料導致資料流混亂的問題，參考一的動圖解釋雖然是以 Redux 為例，但清楚的說明了狀態管理的使用情境。 參考  四張動圖解釋何時該用Redux Vuex官方文件 Vuex語法表 EventBus  概述 下方以 Counter 舉例，大概看一下應該會發現跟原本的 Vue 差不多，也是有 data、methods、computed，只是在 Vuex 裡改叫 state、mutations、getters，還多了跟 emit 很像的 actions 屬性。
// src/store/index.js const store = new Vuex.Store({ state: { count: 0, }, getters: { count: (state) =&amp;gt; state.count, }, mutations: { incrementMutation: (state) =&amp;gt; state.count++, decrementMutation: (state) =&amp;gt; state.count--, }, actions: { incrementAction: ({ commit }) =&amp;gt; commit(&amp;#39;incrementMutation&amp;#39;), decrementAction: ({ commit }) =&amp;gt; commit(&amp;#39;decrementMutation&amp;#39;), } }) // template const Counter = { template: ` &amp;lt;div id=&amp;#34;counter&amp;#34;&amp;gt; &amp;lt;p&amp;gt; {{ count }} &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;button @click=&amp;#34;increment&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;decrement&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; `, computed: { count() { return this.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>Vuex 是 Vue.js 的一種狀態管理模式(工具)，其他前端框架也有類似的管理工具，用來解決多個元件共用資料導致資料流混亂的問題，<a href="#%E5%8F%83%E8%80%83">參考一</a>的動圖解釋雖然是以 Redux 為例，但清楚的說明了狀態管理的使用情境。
<img src="/images/JS/Vue/dataFlow.png" alt="資料流" title="資料流"></p>
<h2 id="參考">參考</h2>
<ol>
<li><a href="https://segmentfault.com/a/1190000012142449">四張動圖解釋何時該用Redux</a></li>
<li><a href="https://vuex.vuejs.org/zh/">Vuex官方文件</a></li>
<li><a href="https://vuejs-tips.github.io/vuex-cheatsheet/">Vuex語法表</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/state-management.html">EventBus</a></li>
</ol>
<h2 id="概述">概述</h2>
<p><img src="/images/JS/Vue/vuexFlow.png" alt="Vuex流程圖" title="Vuex流程圖">
下方以 Counter 舉例，大概看一下應該會發現跟原本的 Vue 差不多，也是有 data、methods、computed，只是在 Vuex 裡改叫 state、mutations、getters，還多了跟 emit 很像的 actions 屬性。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// src/store/index.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">store</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vuex</span>.<span style="color:#a6e22e">Store</span>({
  <span style="color:#a6e22e">state</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">count</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>,
  },
  <span style="color:#a6e22e">getters</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">count</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">state</span>) =&gt; <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">count</span>,
  },
  <span style="color:#a6e22e">mutations</span><span style="color:#f92672">:</span> {
  	<span style="color:#a6e22e">incrementMutation</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">state</span>) =&gt; <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>,
    <span style="color:#a6e22e">decrementMutation</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">state</span>) =&gt; <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">count</span><span style="color:#f92672">--</span>,
  },
  <span style="color:#a6e22e">actions</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">incrementAction</span><span style="color:#f92672">:</span> ({ <span style="color:#a6e22e">commit</span> }) =&gt; <span style="color:#a6e22e">commit</span>(<span style="color:#e6db74">&#39;incrementMutation&#39;</span>),
    <span style="color:#a6e22e">decrementAction</span><span style="color:#f92672">:</span> ({ <span style="color:#a6e22e">commit</span> }) =&gt; <span style="color:#a6e22e">commit</span>(<span style="color:#e6db74">&#39;decrementMutation&#39;</span>),
  }
})

<span style="color:#75715e">// template
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Counter</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">template</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`
</span><span style="color:#e6db74">    &lt;div id=&#34;counter&#34;&gt;
</span><span style="color:#e6db74">      &lt;p&gt;
</span><span style="color:#e6db74">        {{ count }}
</span><span style="color:#e6db74">      &lt;/p&gt;
</span><span style="color:#e6db74">      &lt;p&gt;
</span><span style="color:#e6db74">        &lt;button @click=&#34;increment&#34;&gt;+&lt;/button&gt;
</span><span style="color:#e6db74">        &lt;button @click=&#34;decrement&#34;&gt;-&lt;/button&gt;
</span><span style="color:#e6db74">      &lt;/p&gt;
</span><span style="color:#e6db74">    &lt;/div&gt;
</span><span style="color:#e6db74">  `</span>,
  <span style="color:#a6e22e">computed</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">count</span>() {
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$store</span>.<span style="color:#a6e22e">getters</span>.<span style="color:#a6e22e">count</span>;
    },
  },
  <span style="color:#a6e22e">methods</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">increment</span>() {
      <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$store</span>.<span style="color:#a6e22e">dispatch</span>(<span style="color:#e6db74">&#39;incrementAction&#39;</span>);
    },
    <span style="color:#a6e22e">decrement</span>() {
      <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$store</span>.<span style="color:#a6e22e">dispatch</span>(<span style="color:#e6db74">&#39;decrementAction&#39;</span>);
    },
  }
}
</code></pre></div><p><a href="https://codepen.io/anon/pen/LwNzYz?editors=1010">Codepen範例</a>
Vuex 的狀態管理模式定義了資料流(Data Flow)</p>
<ol>
<li>從圖片左邊的 View 開始，點擊加號按鍵觸發 methods.increment，發出 dispatch 的請求</li>
<li>dispatch 的請求進到 Vuex 裡的 actions.incrementAction 再發出 commit 的請求</li>
<li>commit 的請求進到 mutations，此時 incrementMutation 才會實際去做更新 state 的動作</li>
<li>接著 getters.count 監聽到 state.count 的改變，template 裡的 computed.count 監聽到 getter.count 的改變，之後 view 顯示的計數才完成 +1 的動作。</li>
</ol>
<p>流程圖中還有兩個灰色的格子，其中一個是在 actions 上延伸的 Backend API，在 Counter 範例中沒講到單純是範例過於簡單，之後的範例會用到，簡單說明為何發 API 必須寫在 actions，因為 Vuex 其實在流程上很寬鬆，它只是一個模式，像是 Counter 範例可以再簡單一點，觸發 methods.increment 時，傳到 mutations.incrementMutation 或是直接改 state.count，程式都可以執行，實際要怎麼用，都看自己。</p>
<p>雖然 Vuex 流程寬鬆，但最低至少要遵守以下三點</p>
<ol>
<li>應用層級的狀態應集中到單個 store</li>
<li>只能藉由 mutation 更改 state，且必須同步(不能包含異步操作)</li>
<li>異步操作都在 action 處理</li>
</ol>
<p>其他下一篇再說，理論上會是輕鬆的語法篇。</p>
]]></content>
        </item>
        
        <item>
            <title>Chrome擴充應用初探</title>
            <link>https://mix-liten.github.io/posts/201907/chrome-extensions/</link>
            <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201907/chrome-extensions/</guid>
            <description>前言 起因是 Google Chrome 的某一次改版改了整體的介面，一開始極度不適應，在應用商店裡又找不到滿意的主題來遮醜，就萌生了自己做個主題來用的想法，畢竟很多 Chrome 的主題看起來只是放一張動漫圖在新分頁的背景，感覺不難呀～
參考 官方文件 Google 官方文件一向很齊全，只是英文總是讓人卻步
結論與過程 先說結論，因發佈套件需要5美元註冊，個人認為這次做出來的作品並沒有好到可以以這種形式公開，所以就只放在沒沒無聞的我的GitHub了。
接下來是過程，看前面會知道，起初是想用現成的主題來著，當時不甚滿意的主題分別是Tabliss、Momentum、Live Start Page、Toby、Speed Dial(FVD)，大致上前三個是用免費的風景圖為基底，但功能比較被限制；Toby主打書籤功能；Speed Dial則是我相較滿意的主題，功能非常齊全。
忘記講需求了，比起美美的主題，我更需要的是預設頁面右上角的Google會員功能，Gmail、雲端硬碟&amp;hellip;等等，另外還有新分頁的預設頁面會在上方顯示書籤列表(設定是關閉)，但是上面這些主題客製時，頁面都會整體更新，我需要的功能都要改成用類似書籤的方式實現。
結果 幾番掙扎之後，做了個類似Dynamic Landing Page的畫面，也發現上架主題需要開通費之後，改做了個冬季飄雪特效，當作摸索擴充應用的小結，喜歡的話歡迎拿去使用或修改喔。
後話 大概過了兩個月後我選擇用Colors主題，這個主題就是以一張圖片為背景而已，缺點是圖片的色彩集中在上方，會遮到Google會員功能，這也是我挑掉一堆圖片主題的原因，那為什麼還會使用 Colors 呢？因為它的圖片相較之下比較不突兀，那些動漫、風景圖的解析度在目前使用的32吋螢幕上實在是很模糊。</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>起因是 Google Chrome 的某一次改版改了整體的介面，一開始極度不適應，在應用商店裡又找不到滿意的主題來遮醜，就萌生了自己做個主題來用的想法，畢竟很多 Chrome 的主題看起來只是放一張動漫圖在新分頁的背景，感覺不難呀～</p>
<h2 id="參考">參考</h2>
<p><a href="https://developer.chrome.com/extensions">官方文件</a>
Google 官方文件一向很齊全，只是英文總是讓人卻步</p>
<h2 id="結論與過程">結論與過程</h2>
<p>先說<strong>結論</strong>，因<a href="https://developer.chrome.com/webstore/publish">發佈套件</a>需要5美元註冊，個人認為這次做出來的作品並沒有好到可以以這種形式公開，所以就只放在沒沒無聞的我的GitHub了。</p>
<p>接下來是過程，看前面會知道，起初是想用現成的主題來著，當時不甚滿意的主題分別是<a href="https://chrome.google.com/webstore/detail/tabliss-a-beautiful-new-t/hipekcciheckooncpjeljhnekcoolahp">Tabliss</a>、<a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca">Momentum</a>、<a href="https://chrome.google.com/webstore/detail/live-start-page-living-wa/ocggccaacacpienfcgmgcihoombokbbj">Live Start Page</a>、<a href="https://chrome.google.com/webstore/detail/toby-for-chrome/hddnkoipeenegfoeaoibdmnaalmgkpip">Toby</a>、<a href="https://chrome.google.com/webstore/detail/speed-dial-fvd-new-tab-pa/llaficoajjainaijghjlofdfmbjpebpa">Speed Dial(FVD)</a>，大致上前三個是用免費的風景圖為基底，但功能比較被限制；Toby主打書籤功能；Speed Dial則是我相較滿意的主題，功能非常齊全。</p>
<p>忘記講需求了，比起美美的主題，我更需要的是預設頁面右上角的Google會員功能，Gmail、雲端硬碟&hellip;等等，另外還有新分頁的預設頁面會在上方顯示書籤列表(設定是關閉)，但是上面這些主題客製時，頁面都會整體更新，我需要的功能都要改成用類似書籤的方式實現。</p>
<h2 id="結果">結果</h2>
<p>幾番掙扎之後，做了個類似<a href="https://codepen.io/bradtraversy/full/XLrQvz">Dynamic Landing Page</a>的畫面，也發現上架主題需要開通費之後，改做了個<a href="https://github.com/Mix-Liten/snow-shopee">冬季飄雪特效</a>，當作摸索擴充應用的小結，喜歡的話歡迎拿去使用或修改喔。</p>
<p><img src="/images/CANVAS/snow_shopee.gif" alt="x4飄雪GIF"></p>
<h2 id="後話">後話</h2>
<p>大概過了兩個月後我選擇用<a href="https://chrome.google.com/webstore/detail/colors/lhbgjlhhonbdjfdoiklbbkejcipkbnac">Colors</a>主題，這個主題就是以一張圖片為背景而已，缺點是圖片的色彩集中在上方，會遮到Google會員功能，這也是我挑掉一堆圖片主題的原因，那為什麼還會使用 Colors 呢？因為它的圖片相較之下比較不突兀，那些動漫、風景圖的解析度在目前使用的32吋螢幕上實在是很模糊。</p>
]]></content>
        </item>
        
        <item>
            <title>雜記 - 近日談與體檢心得</title>
            <link>https://mix-liten.github.io/posts/201904/diary-2/</link>
            <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201904/diary-2/</guid>
            <description>久違的發文，前陣子爺爺奶奶那一輩相繼走到人生終點，幫家裡忙一些住院和後事之類的所以沒心情發文，還去醫院把鼻子上據說有點變大的痣挖掉，另外在下雨天的時候騎腳踏車打滑，兩腳膝蓋都中獎，事實告訴我們，騎YouBike要慎選，好啦，說這麼多廢話，總之由於包含但不只於以上原因，我安排今天去做體檢。
彩虹合唱團：來自外公的一封信
體檢項目：馬偕-平安喜樂套檢
TL;DR  胖.jpeg
 流程及觀察 具體的流程是這樣的，首先是事前準備，第一步上網預訂時間並刷卡付四分之一訂金，大約在體檢前兩個禮拜收到掛號信，信裡有一張提醒和裝有便便採集器及使用說明的綠色小夾鏈袋，大致上就是早上八點檢查需要前一天晚上十點以後不能吃也不能喝，以及前三天要正常作息+少吃肉，然後便便要前一天採集之後冰到冷藏。
到了體檢當天，進體檢中心先到櫃台用健保卡報到領取置物櫃鑰匙及號碼牌，注意，雖然說是早上八點報到，但是早到先報到可以比較早走，櫃台服務人員帶領前往男性休息室，裡面有置物櫃、換衣間、大小號廁所、梳妝台，服務人員會先問之前有沒有做過體檢之後才會說明當下要做什麼，這時的流程是換上他們提供的指定衣物(冷氣很冷，給的是厚長袖長褲)，從置物櫃中取得尿液管，注意事項是指定衣物可以帶走、內褲不用脫、尿液要取中後段、置物櫃記得鎖。
離開休息室之後，在大廳的機動型服務人員會隨機找上你帶去量基本的身高、體重、視力、脈搏、腰圍、心電圖，之後帶到X光室前排隊，照完之後再到抽血區排隊，我這次體檢的項目大多都在抽血上，總共抽了六管，抽血的時候因為本人心理上很畏懼被抽血的感覺，臉色蒼白地一直深呼吸，隔壁抽血的護士看了一下就說男性一般捐血可以捐到500cc，我們的檢查項目加起來大概抽20cc不會怎樣啦，檢查項目參考上方體檢項目。
到這邊檢查只剩腹部超音波，這項檢查和最後的問診都要排隊，這時候早到的重要性就出來了，所有人做完其他檢查之後會在大廳閒置，大廳有提供電視、雜誌、報紙和配套的沙發桌椅，邊休息滑手機邊等待超音波室的護士拉人，我是第三個報到的，翻了一本pchome出的雜誌等了15分鐘就輪到我了，超音波檢查檢查過程是先躺平之後護士在肚子上倒一坨潤滑液，接著醫生會拿一個有滾輪的掃描用道具照肝膽腸胃脾腎，邊照邊解說，上方有螢幕配合，螢幕畫面分左右，一邊是即時一邊是截圖做對照，超音波照完到旁邊的小隔間把潤滑液擦掉再離開。
到這邊為止需要空腹的項目都檢查完了，向大廳櫃檯報到可領取套餐一份，套餐構成是主餐+湯+飲品+水，主餐居然是摩斯漢堡的花生雞肉吐司，湯是蘑菇奶油濃湯，飲品可自選咖啡(現磨，豆種喝不出來)、牛奶、果汁(波蜜果菜汁)，我選咖啡並加入奶精+半包糖，愉快的用餐並等待最後的問診。
老樣子，因為號碼很前面所以很快就被叫去問診，過程非常的傳統，用聽診器聽了一下心跳+木棒壓舌發聲+問你有沒有毛病，這邊我不太懂，看心電圖和聽診好像有點重複，這邊醫生給了建議，體重要減到83kg以下才配套我的身高，總之問診結束後回到大廳把剩下的餐點吃完再滑一下手機後到休息室換回衣服，離開前繳回闖關表、滿意度問卷及確認不含六日的14天後寄送檢查結果的聯絡方法並結清剩下的費用。
取得體檢報告前的總結是，胖，現在腰圍大於90，體重90up，輕微脂肪肝，主要問題出在作息和飲食，以及開始上班後回家懶得運動，這又牽扯另一個問題，下班後有太多事情想要做，除了運動以外的其他事情做完差不多就到凌晨一點了，這部分我打算之後先排個一週四天運動，其他事情以未來發展的重要性來排優先順序，希望三個月後能看到滿意的短期成果，加油。</description>
            <content type="html"><![CDATA[<p>久違的發文，前陣子爺爺奶奶那一輩相繼走到人生終點，幫家裡忙一些住院和後事之類的所以沒心情發文，還去醫院把鼻子上據說有點變大的痣挖掉，另外在下雨天的時候騎腳踏車打滑，兩腳膝蓋都中獎，事實告訴我們，騎YouBike要慎選，好啦，說這麼多廢話，總之由於包含但不只於以上原因，我安排今天去做體檢。</p>
<p><a href="https://youtu.be/8IMekum0cKg" title="彩虹合唱團2019暖心新作：來自外公的一封信">彩虹合唱團：來自外公的一封信</a></p>
<p><a href="http://www.hc.mmh.org.tw/757A/Downloads/shopcar_%E5%B9%B3%E5%AE%89%E5%96%9C%E6%A8%82%E5%A5%97%E6%AA%A2.pdf" title="體檢詳細">體檢項目：馬偕-平安喜樂套檢</a></p>
<h2 id="tldr">TL;DR</h2>
<blockquote>
<p>胖.jpeg</p>
</blockquote>
<h2 id="流程及觀察">流程及觀察</h2>
<p>具體的流程是這樣的，首先是事前準備，第一步<strong>上網預訂時間並刷卡付四分之一訂金</strong>，大約在體檢前兩個禮拜收到<strong>掛號信</strong>，信裡有一張提醒和裝有便便採集器及使用說明的綠色小夾鏈袋，大致上就是早上八點檢查需要前一天晚上十點以後不能吃也不能喝，以及前三天要正常作息+少吃肉，然後便便要前一天採集之後冰到冷藏。</p>
<p>到了體檢當天，進體檢中心先到櫃台用健保卡報到領取置物櫃鑰匙及號碼牌，注意，雖然說是早上八點報到，但是<strong>早到先報到可以比較早走</strong>，櫃台服務人員帶領前往男性休息室，裡面有置物櫃、換衣間、大小號廁所、梳妝台，服務人員會先問之前有沒有做過體檢之後才會說明當下要做什麼，這時的流程是換上他們提供的指定衣物(冷氣很冷，給的是厚長袖長褲)，從置物櫃中取得尿液管，注意事項是指定衣物可以帶走、內褲不用脫、尿液要取中後段、置物櫃記得鎖。</p>
<p>離開休息室之後，在大廳的機動型服務人員會隨機找上你帶去量基本的身高、體重、視力、脈搏、腰圍、心電圖，之後帶到X光室前排隊，照完之後再到抽血區排隊，我這次體檢的項目大多都在抽血上，總共抽了六管，抽血的時候因為本人心理上很畏懼被抽血的感覺，臉色蒼白地一直深呼吸，隔壁抽血的護士看了一下就說男性一般捐血可以捐到500cc，我們的檢查項目加起來大概抽20cc不會怎樣啦，檢查項目參考上方體檢項目。</p>
<p>到這邊檢查只剩腹部超音波，這項檢查和最後的問診都要排隊，這時候早到的重要性就出來了，所有人做完其他檢查之後會在大廳閒置，大廳有提供電視、雜誌、報紙和配套的沙發桌椅，邊休息滑手機邊等待超音波室的護士拉人，我是第三個報到的，翻了一本pchome出的雜誌等了15分鐘就輪到我了，超音波檢查檢查過程是先躺平之後護士在肚子上倒一坨潤滑液，接著醫生會拿一個有滾輪的掃描用道具照肝膽腸胃脾腎，邊照邊解說，上方有螢幕配合，螢幕畫面分左右，一邊是即時一邊是截圖做對照，超音波照完到旁邊的小隔間把潤滑液擦掉再離開。</p>
<p><img src="/images/other/mmh-lunch.jpg" alt="套餐圖" title="套餐屍體">
到這邊為止需要空腹的項目都檢查完了，向<strong>大廳櫃檯報到可領取套餐一份</strong>，套餐構成是主餐+湯+飲品+水，主餐居然是摩斯漢堡的花生雞肉吐司，湯是蘑菇奶油濃湯，飲品可自選咖啡(現磨，豆種喝不出來)、牛奶、果汁(波蜜果菜汁)，我選咖啡並加入奶精+半包糖，愉快的用餐並等待最後的問診。</p>
<p><img src="/images/other/mmh-physical-examination.jpg" alt="闖關表" title="檢查項目大綱">
老樣子，因為號碼很前面所以很快就被叫去問診，過程非常的傳統，用聽診器聽了一下心跳+木棒壓舌發聲+問你有沒有毛病，這邊我不太懂，看心電圖和聽診好像有點重複，這邊醫生給了建議，體重要減到83kg以下才配套我的身高，總之問診結束後回到大廳把剩下的餐點吃完再滑一下手機後到休息室換回衣服，離開前<strong>繳回闖關表</strong>、滿意度問卷及<strong>確認不含六日的14天後寄送檢查結果的聯絡方法</strong>並<strong>結清剩下的費用</strong>。</p>
<p>取得體檢報告前的總結是，<strong>胖</strong>，現在腰圍大於90，體重90up，輕微脂肪肝，主要問題出在作息和飲食，以及開始上班後回家懶得運動，這又牽扯另一個問題，下班後有太多事情想要做，除了運動以外的其他事情做完差不多就到凌晨一點了，這部分我打算之後先排個一週四天運動，其他事情以未來發展的重要性來排優先順序，希望三個月後能看到滿意的短期成果，加油。</p>
]]></content>
        </item>
        
        <item>
            <title>釐清JS的export／exports／require／import</title>
            <link>https://mix-liten.github.io/posts/201811/%E9%87%90%E6%B8%85js%E7%9A%84export%E8%88%87exports/</link>
            <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201811/%E9%87%90%E6%B8%85js%E7%9A%84export%E8%88%87exports/</guid>
            <description>前言 使用套件和框架經常看到 require / import / export / exports，因為之前都抱著「能用就好」的想法，一直沒有詳細了解，最近因為學習 Vue、React 和 Webpack，覺得有必要把這種偏向基礎但很重要的部分看懂。
首先先了解它們原本的界定範圍： require： Node.js、ES6 export ／ import ： ES6 module.exports ／ exports： Node.js
可能有疑問為什麼要說Node.js的語法，因為現在前端幾乎都仰賴Node.js的npm在做事，框架也不例外，另外跟原生的語法也滿容易搞混，用法和用詞都是。
Node.js的用法 //exports.js const test = 100; console.log(module.exports); // {} console.log(exports); // {}  exports.output = test; // 同步修改 module.exports 為 {output : 100} /* 千萬不要 exports = test; */ //require.js const a = require(&amp;#39;./exports&amp;#39;); console.log(a) // {output : 100} 理論上 exports = module.exports = {}，但是有一點要注意，直接指定 exports 是無效的，而且也不會匯出，因為 require 拿到的只會是 module.</description>
            <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>使用套件和框架經常看到 require / import / export / exports，因為之前都抱著「能用就好」的想法，一直沒有詳細了解，最近因為學習 Vue、React 和 Webpack，覺得有必要把這種偏向基礎但很重要的部分看懂。</p>
<p>首先先了解它們原本的界定範圍：
require： Node.js、ES6
export ／ import ： ES6
module.exports ／ exports： Node.js</p>
<p>可能有疑問為什麼要說Node.js的語法，因為現在前端幾乎都仰賴Node.js的npm在做事，框架也不例外，另外跟原生的語法也滿容易搞混，用法和用詞都是。</p>
<h3 id="nodejs的用法">Node.js的用法</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//exports.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">test</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span>); <span style="color:#75715e">// {}
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">exports</span>); <span style="color:#75715e">// {}
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">exports</span>.<span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">test</span>; <span style="color:#75715e">// 同步修改 module.exports 為 {output : 100}
</span><span style="color:#75715e"></span><span style="color:#75715e">/* 千萬不要 exports = test; */</span>

<span style="color:#75715e">//require.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;./exports&#39;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">a</span>) <span style="color:#75715e">// {output : 100} 
</span></code></pre></div><p>理論上 exports = module.exports = {}，但是有一點要注意，<strong>直接指定 exports 是無效的</strong>，而且也不會匯出，因為 require 拿到的只會是 module.exports，直接指定 exports 等於重新指定變數的內容，等於不再依照理論上的參照。</p>
<p>結論，盡量使用 module.exports，畢竟實際上匯入匯出的都是它，也可以直接迴避上述的錯誤。</p>
<h3 id="es6的用法">ES6的用法</h3>
<p>寫法直接參考MDN：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Add-on_SDK/Guides/Contributor_s_Guide/Modules">MDN - Modules</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/export">MDN - export</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/import">MDN - import</a></li>
</ul>
<p>這邊只說明一般常用的 export default，因為輸出是預設(default)，import 的時候可以任意取名；如果是 export test，則必須 import {test}，也可用 import {test as xxx} 的方式取別的名稱；總結用 export default的好處是可以在匯入時不用知道匯入的檔案匯出什麼，壞處是會可能載入多餘的東西，當然 export default 也可以用 import {} 來避免壞處。</p>
<p>另外還有個重點是，在一個檔案中，<strong>export、import 可以有很多個</strong>，但是 <strong>export default 只能有一個</strong>。</p>
<h6 id="備註">備註</h6>
<p>現在有種寫法可以直接在html裡import</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// example.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">cube</span>(<span style="color:#a6e22e">x</span>) {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">x</span>
}
<span style="color:#66d9ef">export</span> { <span style="color:#a6e22e">cube</span> }
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- index.html --&gt;</span>
&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;module&#34;</span>&gt;
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">cube</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;example.js&#34;</span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">cube</span>(<span style="color:#ae81ff">3</span>)) <span style="color:#75715e">// 27
</span><span style="color:#75715e"></span>&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>原理請參考<a href="https://segmentfault.com/a/1190000014318751">圖說 ES Modules</a>
順便看目前瀏覽器能不能用 <a href="https://caniuse.com/#search=JavaScript%20modules">Can I use - ES Module</a></p>
<p>目前ES的用法(import)僅常見於框架的CLI，因為很多瀏覽器都還不支援ES6的語法，Node.js也不支援，因此請愛用<a href="https://babeljs.io/">Babel</a>，它會把新語法轉換成舊的，import 會被轉換成 require。</p>
]]></content>
        </item>
        
        <item>
            <title>雜記 - 近日談</title>
            <link>https://mix-liten.github.io/posts/201806/diary-1/</link>
            <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201806/diary-1/</guid>
            <description>這幾天已經把JS30看完了，課程檔案整理之後換上傳到GitHub，紀錄不久之後也會陸續放上來，最近會先以六角學院主辦的活動為優先。
前面提到的活動是The F2E - 前端修練精神時光屋，因為是以每週為一期，應該也會分享一些想法、紀錄之類的。
雖然是六角學院主辦的活動，但是任何人都可以報名參加喔，另外標榜設計方面的資源會以 CC0 授權方式提供，簡單的理解就是免費、隨便用、隨便分享啦，當然也可以不報名不被一週期限限制，之後再從裡面挑喜歡的主題做，不過可以和一千多人一起腦力激盪，在自己做過之後和他們互相分享各自做的作品，不覺得是個很好、也很難得的學習機會嗎?
廢話不想看太多の懶人包  將會參與The F2E - 前端修練精神時光屋  JS30紀錄 和 Vue的component介紹 之後會補  </description>
            <content type="html"><![CDATA[<p>這幾天已經把JS30看完了，課程檔案整理之後換上傳到GitHub，紀錄不久之後也會陸續放上來，最近會先以六角學院主辦的活動為優先。</p>
<p>前面提到的活動是<a href="https://github.com/hexschool/TheF2E">The F2E - 前端修練精神時光屋</a>，因為是以每週為一期，應該也會分享一些想法、紀錄之類的。</p>
<p><img src="/images/other/the_F2E.jpg" alt="The F2E" title="The F2E"></p>
<p>雖然是六角學院主辦的活動，但是任何人都可以報名參加喔，另外標榜設計方面的資源會以 CC0 授權方式提供，簡單的理解就是免費、隨便用、隨便分享啦，當然也可以不報名不被一週期限限制，之後再從裡面挑喜歡的主題做，不過可以和一千多人一起腦力激盪，在自己做過之後和他們互相分享各自做的作品，不覺得是個很好、也很難得的學習機會嗎?</p>
<h4 id="廢話不想看太多の懶人包">廢話不想看太多の懶人包</h4>
<ul>
<li>將會參與<a href="https://github.com/hexschool/TheF2E">The F2E - 前端修練精神時光屋</a>
<!-- raw HTML omitted --></li>
<li>JS30紀錄 和 Vue的component介紹 之後會補</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>React 入門</title>
            <link>https://mix-liten.github.io/posts/201805/react%E5%85%A5%E9%96%80/</link>
            <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/react%E5%85%A5%E9%96%80/</guid>
            <description>這幾天因為JS30單個章節長達30分鐘，有點沒耐心，就去看了一下之前存下來準備之後有時間看的內容，分享一下近年來使用率極高的React的相關資源，僅止於入門。
 React 官網 React 簡中官網 翻譯的版本稍微落後一點，右鍵翻譯成繁中即可，如果對大陸用語不習慣，最近剛好有人做轉換套件，效用是把數組-&amp;gt;陣列之類的。 ReactJS 101 標榜從零開始學 ReactJS，希望讓初學者一看就懂的，不過解釋和說明的部分，如果是幾個月前我還沒學Vue還真看不懂，延伸資源和Google會很有幫助。 激戰 ReactJS 30天 IT邦幫忙鐵人賽的文章，號稱連續30天不間斷發文分享挑戰，但通常第一天和最後一天會寫引言和感想。  專案的組件越來越多的情況下，裡面的state比較難管理，可用一些套件幫忙管理狀態，如Flux、Redux、MobX，影片教學在youtube很多，像是Redux的教學就有：
 wes bos LearnCode.academy thenewboston  順便記錄一個之前用Vue就有的疑問，為什麼組件最外層都是div，先來看看官網最基礎的範例 如果同個組件，hello world後面還想放一個p段落，試著把下方兩種寫法貼到範例連結試試，原因其實是組件的解析只能有一層，不能並排。
&amp;lt;script type=&amp;#34;text/babel&amp;#34;&amp;gt; // 錯誤 ReactDOM.render( &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;content&amp;lt;/p&amp;gt;, document.getElementById(&amp;#39;example&amp;#39;) ); &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/babel&amp;#34;&amp;gt; /* 正確 */ ReactDOM.render( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;content&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt;, document.getElementById(&amp;#39;example&amp;#39;) ); &amp;lt;/script&amp;gt; 總的來說，React的JSX其實只是讓你可以在js裡寫html，不過略有不同，詳細可以看官網介紹或是TechBridge 技術共筆部落格的分享。 React較精深的部分(官網的進階指引)目前我也還看不太懂，大略只知道它本身有提供一些能提高效能的作法。</description>
            <content type="html"><![CDATA[<p>這幾天因為JS30單個章節長達30分鐘，有點沒耐心，就去看了一下之前存下來準備之後有時間看的內容，分享一下近年來使用率極高的React的相關資源，僅止於入門。</p>
<ol>
<li><a href="https://reactjs.org/">React 官網</a></li>
<li><a href="https://doc.react-china.org/">React 簡中官網</a>
翻譯的版本稍微落後一點，右鍵翻譯成繁中即可，如果對大陸用語不習慣，最近剛好有人做<a href="https://chrome.google.com/webstore/detail/cn2tw4programmer/emjpciklgncophlffcjipabmigmdkdmc">轉換套件</a>，效用是把數組-&gt;陣列之類的。</li>
<li><a href="https://github.com/kdchang/reactjs101">ReactJS 101</a>
標榜從零開始學 ReactJS，希望讓初學者一看就懂的，不過解釋和說明的部分，如果是幾個月前我還沒學Vue還真看不懂，延伸資源和Google會很有幫助。</li>
<li><a href="https://ithelp.ithome.com.tw/users/20107674/ironman/1472">激戰 ReactJS 30天</a>
IT邦幫忙鐵人賽的文章，號稱連續30天不間斷發文分享挑戰，但通常第一天和最後一天會寫引言和感想。</li>
</ol>
<p>專案的組件越來越多的情況下，裡面的state比較難管理，可用一些套件幫忙管理狀態，如Flux、Redux、MobX，影片教學在youtube很多，像是Redux的教學就有：</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=hmwBow1PUuo&amp;list=PLu8EoSxDXHP5uyzEWxdlr9WQTJJIzr6jy">wes bos</a></li>
<li><a href="https://www.youtube.com/watch?v=1w-oQ-i1XB8&amp;list=PLoYCgNOIyGADILc3iUJzygCqC8Tt3bRXt">LearnCode.academy</a></li>
<li><a href="https://www.youtube.com/watch?v=DiLVAXlVYR0&amp;list=PL6gx4Cwl9DGBbSLZjvleMwldX8jGgXV6a">thenewboston</a></li>
</ul>
<p>順便記錄一個之前用Vue就有的疑問，為什麼組件最外層都是div，先來看看官網最基礎的<a href="http://jsbin.com/hefuvolixa/edit?html,output">範例</a>
如果同個組件，hello world後面還想放一個p段落，試著把下方兩種寫法貼到範例連結試試，原因其實是組件的解析只能有一層，不能並排。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/babel&#34;</span>&gt;
<span style="color:#75715e">// 錯誤 
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ReactDOM</span>.<span style="color:#a6e22e">render</span>(
  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Hello</span>, <span style="color:#a6e22e">world</span><span style="color:#f92672">!&lt;</span><span style="color:#960050;background-color:#1e0010">/h1&gt;</span>
  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">p</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">content</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/p&gt;,</span>
  document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;example&#39;</span>)
);
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/babel&#34;</span>&gt;
<span style="color:#75715e">/* 正確 */</span>
<span style="color:#a6e22e">ReactDOM</span>.<span style="color:#a6e22e">render</span>(
  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Hello</span>, <span style="color:#a6e22e">world</span><span style="color:#f92672">!&lt;</span><span style="color:#960050;background-color:#1e0010">/h1&gt;</span>
    <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">p</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">content</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/p&gt;</span>
  <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/div&gt;,</span>
  document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#39;example&#39;</span>)
);
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>總的來說，React的JSX其實只是讓你可以在js裡寫html，不過略有不同，詳細可以看官網介紹或是<a href="https://blog.techbridge.cc/2016/04/21/react-jsx-introduction/">TechBridge 技術共筆部落格</a>的分享。
React較精深的部分(官網的進階指引)目前我也還看不太懂，大略只知道它本身有提供一些能提高效能的作法。</p>
]]></content>
        </item>
        
        <item>
            <title>JS30-Day14 &amp; Day15 &amp; Day16</title>
            <link>https://mix-liten.github.io/posts/201805/js30-day14day15day16/</link>
            <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/js30-day14day15day16/</guid>
            <description>先說一個與JS30無關，但經常看到的東西，有時候會看到別人的資料夾結構，原以為是手打，今天才知道可以直接輸出。 在cmd裡打command line指令：
 tree，印出純資料夾結構 tree/f，印出資料夾結構+檔案 前兩項後面加，&amp;gt;123.txt，就會在同一層增加一個123.txt檔，裡面有tree的內容  備註：只有命令提示字元預設有這個功能。
Day 14 原始型別處理值，物件型別處理參考。
JavaScript中的原始型別(Primitive Type)：
 String mNumber Boolean Null Undefined  物件型別(Object Type)：
 Object Function Array Set  參考： JS基礎：Primitive type v.s Object types
Day 15 主要在講LocalStorage，不過之前已經學過、用過了，重新複習一下，增加了刪除功能，不然資料會一直保存在LocalStorage裡，跟Cookie、Session不一樣，不能設定max-age。
const keyList = [{ name: &amp;#39;John&amp;#39;, secret: &amp;#39;1234&amp;#39; },{ name: &amp;#39;Tom&amp;#39;, secret: &amp;#39;6789&amp;#39; }]; // 存入localStorage的值必須是字串 let keys = JSON.stringify(keyList); // 放一個取為名&amp;#39;key&amp;#39;的localStorage，值則是後面的變數key localStorage.setItem(&amp;#39;keys&amp;#39;, keys); //從localStorage裡取出的值因為是字串也要處理一下 JSON.parse(localStorage.getItem(&amp;#39;keys&amp;#39;));  formObject.reset() 重置表單  Day 16 很炫的特效，不過下面這個觀念用法更是炫炮。</description>
            <content type="html"><![CDATA[<p>先說一個與JS30無關，但經常看到的東西，有時候會看到別人的資料夾結構，原以為是手打，今天才知道可以直接輸出。
在cmd裡打command line指令：</p>
<ol>
<li>tree，印出純資料夾結構</li>
<li>tree/f，印出資料夾結構+檔案</li>
<li>前兩項後面加，&gt;123.txt，就會在同一層增加一個123.txt檔，裡面有tree的內容</li>
</ol>
<p>備註：只有命令提示字元預設有這個功能。</p>
<h2 id="day-14">Day 14</h2>
<p>原始型別處理值，物件型別處理參考。</p>
<p>JavaScript中的原始型別(Primitive Type)：</p>
<ol>
<li>String</li>
<li>mNumber</li>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
</ol>
<p>物件型別(Object Type)：</p>
<ol>
<li>Object</li>
<li>Function</li>
<li>Array</li>
<li>Set</li>
</ol>
<p>參考：
<a href="https://medium.com/@jobboy0101/js%E5%9F%BA%E7%A4%8E-primitive-type-v-s-object-types-f88f7c16f225">JS基礎：Primitive type v.s Object types</a></p>
<h2 id="day-15">Day 15</h2>
<p>主要在講LocalStorage，不過之前已經學過、用過了，重新複習一下，增加了刪除功能，不然資料會一直保存在LocalStorage裡，跟Cookie、Session不一樣，不能設定max-age。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">keyList</span> <span style="color:#f92672">=</span> [{
  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;John&#39;</span>,
  <span style="color:#a6e22e">secret</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;1234&#39;</span>
},{
  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Tom&#39;</span>,
  <span style="color:#a6e22e">secret</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;6789&#39;</span>
}];

<span style="color:#75715e">// 存入localStorage的值必須是字串
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">keys</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">keyList</span>);

<span style="color:#75715e">// 放一個取為名&#39;key&#39;的localStorage，值則是後面的變數key
</span><span style="color:#75715e"></span><span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">setItem</span>(<span style="color:#e6db74">&#39;keys&#39;</span>, <span style="color:#a6e22e">keys</span>);

<span style="color:#75715e">//從localStorage裡取出的值因為是字串也要處理一下
</span><span style="color:#75715e"></span><span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">localStorage</span>.<span style="color:#a6e22e">getItem</span>(<span style="color:#e6db74">&#39;keys&#39;</span>));
</code></pre></div><ul>
<li>formObject.reset()
重置表單</li>
</ul>
<h2 id="day-16">Day 16</h2>
<p>很炫的特效，不過下面這個觀念用法更是炫炮。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">offsetX</span>;
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">offsetY</span>;
<span style="color:#75715e">//等同於
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> {<span style="color:#a6e22e">offsetX</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">offsetY</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">y</span>} <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>;
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>JS30-Day11 &amp; Day12 &amp; Day13</title>
            <link>https://mix-liten.github.io/posts/201805/js30-day11day12day13/</link>
            <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/js30-day11day12day13/</guid>
            <description>Day 11 總算知道明明都是html的video元素，為什麼每個影片網站的樣式都略有不同，很簡單，不要用現成的controls，自己用CSS搭一個樣式，再用JS去控制Video的撥放/暫停、播放時間、音量、撥放速度。 這個章節我只增加了一個全螢幕按鍵，參照MDN的文件，看起來有點複雜的一段if判斷式，主要是因為每種瀏覽器的video元素略有不同。 美中不足的是全螢幕之後，預設的controls又出現了。
Day 12  array.splice(index,howmany,item1,&amp;hellip;..,itemX) index，插入的位置 howmany，刪除多少，沒輸入的話，從插入的位置開始刪到最後 後面還可以放想插入的值 splice 和 slice 不同的地方是splice會更動到原本的值  Day 13  Lodash  工具庫，提供很多方便的函式，這個章節用到的是debounce，功能是將想執行的function稍微延遲，這邊的應用是延遲滑入圖片，簡單、快速地實現了之前用的lazyloadxt套件。
檢測圖片是否要進入的步驟:
 取得圖片一半高度的定位點，卷軸高度(window.scrollY) + 視窗高度(window.innerHeight) - 圖片的二分之一高 取得圖片底部定位點，圖片的offsetTop + height，offsetTop是瀏覽器左上角為基準到圖片最上方的距離 判斷是否超過圖片一半的位置， 第一步的運算結果 大於 圖片的offsetTop 判斷卷軸移動距離超過圖片底部了沒，卷軸高度 小於 第二步運算結果 在圖片高度已經出現一半 且 視窗裡看得到圖片的情況下滑入，反之在已經看不到圖片位置的情況下移出圖片  </description>
            <content type="html"><![CDATA[<h2 id="day-11">Day 11</h2>
<p>總算知道明明都是html的video元素，為什麼每個影片網站的樣式都略有不同，很簡單，不要用現成的controls，自己用CSS搭一個樣式，再用JS去控制Video的撥放/暫停、播放時間、音量、撥放速度。
這個章節我只增加了一個全螢幕按鍵，參照<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fullscreen_API">MDN</a>的文件，看起來有點複雜的一段if判斷式，主要是因為每種瀏覽器的video元素略有不同。
美中不足的是全螢幕之後，預設的controls又出現了。</p>
<h2 id="day-12">Day 12</h2>
<ul>
<li>array.splice(index,howmany,item1,&hellip;..,itemX)
index，插入的位置
howmany，刪除多少，沒輸入的話，從插入的位置開始刪到最後
後面還可以放想插入的值
splice 和 slice 不同的地方是splice會更動到原本的值</li>
</ul>
<h2 id="day-13">Day 13</h2>
<ul>
<li><a href="https://lodash.com/">Lodash</a></li>
</ul>
<p>工具庫，提供很多方便的函式，這個章節用到的是debounce，功能是將想執行的function稍微延遲，這邊的應用是延遲滑入圖片，簡單、快速地實現了之前用的lazyloadxt套件。</p>
<p>檢測圖片是否要進入的步驟:</p>
<ol>
<li>取得圖片一半高度的定位點，卷軸高度(window.scrollY) + 視窗高度(window.innerHeight) - 圖片的二分之一高</li>
<li>取得圖片底部定位點，圖片的offsetTop + height，offsetTop是瀏覽器左上角為基準到圖片最上方的距離</li>
<li>判斷是否超過圖片一半的位置， 第一步的運算結果 大於 圖片的offsetTop</li>
<li>判斷卷軸移動距離超過圖片底部了沒，卷軸高度 小於 第二步運算結果</li>
<li>在圖片高度已經出現一半 且 視窗裡看得到圖片的情況下滑入，反之在已經看不到圖片位置的情況下移出圖片</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>CSS設計模式</title>
            <link>https://mix-liten.github.io/posts/201805/css%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/</link>
            <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/css%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F/</guid>
            <description>OOCSS (Object-oriented CSS) Bootstrap的作法
.mt-1 { margin-top: 1rem; } .mt-2 { margin-top: 1.5rem; } .text-blue { color: #00f; } .text-shadow { box-shadow: 2px 2px 5px black; } 規劃、做好OOCSS，達到不需要再碰CSS，參考設計者的文件添加class，就能做出有style的網頁。 顯而易見的缺點是會很呆板，所以即使使用Bootstrap、Semantic UI之類的工具，稍微寫點個性化CSS是個不錯的選擇。 當然如果只是想快速做個樣式，到他們的官網copy範例改一改就好。
SMACSS (Scalable and Modular Architecture for CSS)  基本結構    Base 放 Reset CSS 和 一開始設計網頁時規定好的基礎樣式設定(字體設定、連結hover設定&amp;hellip;)
  Layout 放出現頻率很高的區塊的CSS，如Header、Footer，還有一些常用區塊，如簡單呈現會員資料(頭像+名字+會員等級&amp;hellip;)
  Module 寫好模組階層，建議用class，方便平行使用。
  &amp;lt;div class=&amp;#34;fly&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;fly-name&amp;#34;&amp;gt;Name&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;fly-age&amp;#34;&amp;gt;25 years old&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;article class=&amp;#34;fly&amp;#34;&amp;gt; &amp;lt;p class=&amp;#34;fly-name&amp;#34;&amp;gt;Name&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;fly-age&amp;#34;&amp;gt;25 years old&amp;lt;/p&amp;gt; &amp;lt;/article&amp;gt; &amp;lt;style&amp;gt; .</description>
            <content type="html"><![CDATA[<h2 id="oocsshttpoocssorg-object-oriented-css"><a href="http://oocss.org/">OOCSS</a> (Object-oriented CSS)</h2>
<p>Bootstrap的作法</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">mt-1</span> {
  <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">rem</span>;
}

.<span style="color:#a6e22e">mt-2</span> {
  <span style="color:#66d9ef">margin-top</span>: <span style="color:#ae81ff">1.5</span><span style="color:#66d9ef">rem</span>;
}

.<span style="color:#a6e22e">text-blue</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#00f</span>;
}

.<span style="color:#a6e22e">text-shadow</span> {
  <span style="color:#66d9ef">box-shadow</span>: <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">black</span>;
}
</code></pre></div><p>規劃、做好OOCSS，達到不需要再碰CSS，參考設計者的文件添加class，就能做出有style的網頁。
顯而易見的缺點是會很呆板，所以即使使用Bootstrap、Semantic UI之類的工具，稍微寫點個性化CSS是個不錯的選擇。
當然如果只是想快速做個樣式，到他們的官網copy範例改一改就好。</p>
<h2 id="smacsshttpssmacsscom-scalable-and-modular-architecture-for-css"><a href="https://smacss.com/">SMACSS</a> (Scalable and Modular Architecture for CSS)</h2>
<ul>
<li>基本結構</li>
</ul>
<ol>
<li>
<p>Base
放 Reset CSS 和 一開始設計網頁時規定好的基礎樣式設定(字體設定、連結hover設定&hellip;)</p>
</li>
<li>
<p>Layout
放出現頻率很高的區塊的CSS，如Header、Footer，還有一些常用區塊，如簡單呈現會員資料(頭像+名字+會員等級&hellip;)</p>
</li>
<li>
<p>Module
寫好模組階層，建議用class，方便平行使用。</p>
</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fly&#34;</span>&gt;
  &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fly-name&#34;</span>&gt;Name&lt;/<span style="color:#f92672">span</span>&gt; 
  &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fly-age&#34;</span>&gt;25 years old&lt;/<span style="color:#f92672">span</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;

&lt;<span style="color:#f92672">article</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fly&#34;</span>&gt;
  &lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fly-name&#34;</span>&gt;Name&lt;/<span style="color:#f92672">p</span>&gt; 
  &lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fly-age&#34;</span>&gt;25 years old&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">article</span>&gt;

&lt;<span style="color:#f92672">style</span>&gt;
.<span style="color:#a6e22e">fly</span>{<span style="color:#960050;background-color:#1e0010">...</span>}
.<span style="color:#a6e22e">fly</span> .<span style="color:#a6e22e">fly-name</span>{}
.<span style="color:#a6e22e">fly</span> .<span style="color:#a6e22e">fly-age</span>{}
&lt;/<span style="color:#f92672">style</span>&gt;
</code></pre></div><ol start="4">
<li>
<p>State
顧名思義的狀態，應用在Layout與Module，如.is-disabled、.is-active，可用JavaScript來操作狀態，比較不共用的部分也可以直接寫在Module裡。</p>
</li>
<li>
<p>Theme
區別出主題，常用在切換多國語言樣式、網站主題風格，如</p>
</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#75715e">/* Layout CSS -&gt; _layout.scss */</span>
#comment {
  <span style="color:#66d9ef">border</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span>;
}

<span style="color:#75715e">/* 樣式CSS -&gt; theme-default.scss */</span>
#comment {
    <span style="color:#66d9ef">border-color</span>: <span style="color:#66d9ef">black</span>;
} 
</code></pre></div><h2 id="bemhttpgetbemcom-block-element-modifier"><a href="http://getbem.com/">BEM</a> (Block Element Modifier)</h2>
<p>用規定的命名方式，一眼看出這個CSS在做什麼</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">block</span>{} <span style="color:#75715e">/* 區塊 (Block) */</span>
.<span style="color:#a6e22e">block__element</span>{} <span style="color:#75715e">/* 元素 (Element) */</span>
.<span style="color:#a6e22e">block--modifier</span>{} <span style="color:#75715e">/* 修飾符（Modifier） */</span>
</code></pre></div><p>網站分很多區塊，以導覽列(nav)為例，nav是一個區塊(.nav{})，裡面的清單是元素(.nav__list{})，滑鼠放在元素上時的表現(.nav&ndash;focus{})。</p>
<h2 id="mvcsshttpsmvcssycnetscom"><a href="https://mvcss.ycnets.com/">MVCSS</a></h2>
<p>連結裡有翻譯過的說明，簡單說，它融合了前三種設計模式、參考了幾種CSS framework，需要比較多時間熟悉。</p>
<h2 id="其他想說的話">其他想說的話</h2>
<p>細節直接去官網看吧，這裡只是大略介紹。</p>
<p>不管怎麼說，這些只是設計模式、風格，不是規定，所以不是必須要用，但是你也看到了，照著一定程度的規範寫，可讀性比較高，以防三個月後回頭看自己寫的都看不懂。</p>
<p>命名可以語意話一點(#about)，不要隨便取(#aaa)。</p>
<p>建議以功能命名(.primary-border)，而不是視覺效果命名(.blue-border)。</p>
<p>除非必要，不要把CSS Selector寫得太死(nav ul li.first span)，這樣只要HTML結構稍微有點不一樣就會失效，簡單的寫個大方向就好(nav .first)。</p>
]]></content>
        </item>
        
        <item>
            <title>JS30-Day8 &amp; Day9 &amp; Day10</title>
            <link>https://mix-liten.github.io/posts/201805/js30-day8day9day10/</link>
            <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/js30-day8day9day10/</guid>
            <description>這篇主要講一下入門的2D canvas、console的應用、還有感覺很像UX的想法(?)
Day 8  Canvas   為何canvas要用JS寫? 規定，html的canvas元素只是個容器，內容必須用JS繪圖。 canvas 基礎 繪圖原點是(0,0)，X軸往右為正，Y軸往下為正，單位是px。  &amp;lt;canvas id=&amp;#34;mycanvas&amp;#34;&amp;gt;&amp;lt;/canvas&amp;gt; &amp;lt;script&amp;gt; const canvas = document.getElementById(&amp;#34;mycanvas&amp;#34;); const ctx = canvas.getContext(&amp;#34;2d&amp;#34;); // 設定畫布寬高 canvas.width = window.innerWidth; canvas.height = window.innerHeight; ctx.beginPath(); // 開始畫 ctx.arc(80,70,60,-0.5*Math.PI,1*Math.PI); // 以(80,70)為中心點畫從-90度到180度且半徑為60的圓 ctx.fillStyle = &amp;#34;#666&amp;#34;; // 類似background-color ctx.fill(); // 設定好顏色之後還要執行填滿 ctx.strokeStyle = &amp;#34;#fa0&amp;#34;; // 類似border-color ctx.stroke(); // 邊框同樣要執行  ctx.fillStyle = &amp;#34;red&amp;#34;; // 重新指定顏色 ctx.strokeStyle = &amp;#34;green&amp;#34;; ctx.strokeRect(10,10,25,25); //從(10,10)畫一個寬高都是25的正方形邊框 ctx.fillRect(40,30,50,50); //從(40,30)畫一個寬高都是50的正方形 ctx.clearRect(45,35,20,20); //從(45,35)清空一塊寬高都是20的正方形  ctx.</description>
            <content type="html"><![CDATA[<p>這篇主要講一下入門的2D canvas、console的應用、還有感覺很像UX的想法(?)</p>
<h2 id="day-8">Day 8</h2>
<ul>
<li>Canvas</li>
</ul>
<ol>
<li>為何canvas要用JS寫?
規定，html的canvas元素只是個容器，內容必須用JS繪圖。</li>
<li>canvas 基礎
繪圖原點是(0,0)，X軸往右為正，Y軸往下為正，單位是px。</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">canvas</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mycanvas&#34;</span>&gt;&lt;/<span style="color:#f92672">canvas</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">canvas</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;mycanvas&#34;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ctx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">canvas</span>.<span style="color:#a6e22e">getContext</span>(<span style="color:#e6db74">&#34;2d&#34;</span>);
<span style="color:#75715e">// 設定畫布寬高
</span><span style="color:#75715e"></span><span style="color:#a6e22e">canvas</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">innerWidth</span>;
<span style="color:#a6e22e">canvas</span>.<span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">innerHeight</span>;

<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">beginPath</span>(); <span style="color:#75715e">// 開始畫
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">arc</span>(<span style="color:#ae81ff">80</span>,<span style="color:#ae81ff">70</span>,<span style="color:#ae81ff">60</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">0.5</span><span style="color:#f92672">*</span>Math.<span style="color:#a6e22e">PI</span>,<span style="color:#ae81ff">1</span><span style="color:#f92672">*</span>Math.<span style="color:#a6e22e">PI</span>); <span style="color:#75715e">// 以(80,70)為中心點畫從-90度到180度且半徑為60的圓
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fillStyle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#666&#34;</span>; <span style="color:#75715e">// 類似background-color
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fill</span>(); <span style="color:#75715e">// 設定好顏色之後還要執行填滿
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">strokeStyle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;#fa0&#34;</span>; <span style="color:#75715e">// 類似border-color
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">stroke</span>(); <span style="color:#75715e">// 邊框同樣要執行
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fillStyle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;red&#34;</span>; <span style="color:#75715e">// 重新指定顏色
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">strokeStyle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;green&#34;</span>; 
<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">strokeRect</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">25</span>,<span style="color:#ae81ff">25</span>); <span style="color:#75715e">//從(10,10)畫一個寬高都是25的正方形邊框
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fillRect</span>(<span style="color:#ae81ff">40</span>,<span style="color:#ae81ff">30</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">50</span>); <span style="color:#75715e">//從(40,30)畫一個寬高都是50的正方形
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">clearRect</span>(<span style="color:#ae81ff">45</span>,<span style="color:#ae81ff">35</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">20</span>); <span style="color:#75715e">//從(45,35)清空一塊寬高都是20的正方形
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">beginPath</span>(); 
<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">moveTo</span>(<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">75</span>); <span style="color:#75715e">// 移動原點 
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">arcTo</span>(<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">75</span>,<span style="color:#ae81ff">100</span>,<span style="color:#ae81ff">150</span>,<span style="color:#ae81ff">30</span>); <span style="color:#75715e">// 在兩個切線中間畫弧線
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">lineTo</span>(<span style="color:#ae81ff">125</span>,<span style="color:#ae81ff">30</span>); <span style="color:#75715e">//畫一條線到指定位置
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">closePath</span>(); <span style="color:#75715e">// 自動閉合
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fillStyle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;blue&#34;</span>; 
<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fill</span>(); 
<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">stroke</span>();

&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>重疊效果 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation">Context2D.globalCompositeOperation</a></p>
<ol start="3">
<li>幫自己畫網格，方便繪製</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">canvas</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mycanvas&#34;</span>&gt;&lt;/<span style="color:#f92672">canvas</span>&gt;

&lt;<span style="color:#f92672">style</span>&gt;
<span style="color:#f92672">html</span><span style="color:#f92672">,</span> <span style="color:#f92672">body</span> {
  <span style="color:#66d9ef">height</span>: <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>;
  <span style="color:#66d9ef">display</span>: <span style="color:#66d9ef">flex</span>;
  <span style="color:#66d9ef">justify-content</span>: <span style="color:#66d9ef">center</span>;
  <span style="color:#66d9ef">align-items</span>: <span style="color:#66d9ef">center</span>;
}

<span style="color:#f92672">canvas</span> {
  <span style="color:#66d9ef">border</span>: <span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#ae81ff">#000</span>;
}
&lt;/<span style="color:#f92672">style</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">canvas</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;mycanvas&#34;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ctx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">canvas</span>.<span style="color:#a6e22e">getContext</span>(<span style="color:#e6db74">&#34;2d&#34;</span>);
<span style="color:#a6e22e">canvas</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>;
<span style="color:#a6e22e">canvas</span>.<span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">500</span>;

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">draw</span>() {
  <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">beginPath</span>();
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">pos</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">50</span>;
    <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">moveTo</span>(<span style="color:#a6e22e">pos</span>, <span style="color:#ae81ff">0</span>);
    <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">lineTo</span>(<span style="color:#a6e22e">pos</span>, <span style="color:#ae81ff">500</span>);
    <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fillText</span>(<span style="color:#a6e22e">pos</span>, <span style="color:#a6e22e">pos</span>, <span style="color:#ae81ff">10</span>);

    <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">moveTo</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">pos</span>);
    <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">lineTo</span>(<span style="color:#ae81ff">500</span>, <span style="color:#a6e22e">pos</span>);
    <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">fillText</span>(<span style="color:#a6e22e">pos</span>, <span style="color:#ae81ff">10</span>, <span style="color:#a6e22e">pos</span>);
  };
  <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">strokeStyle</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rgba(0, 0, 0, 0.4)&#34;</span>;
  <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">stroke</span>();
};

<span style="color:#a6e22e">draw</span>();
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p><a href="https://codepen.io/anon/pen/MGZzdY">codepen連結</a></p>
<h2 id="day-9">Day 9</h2>
<p>總算知道在Facebook開F12裡的警告訊息和一些工具在開發版本的提示訊息是怎麼做的了。</p>
<ul>
<li>console</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">clear</span>(); <span style="color:#75715e">// 清空console 通常放在最前面
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;hello&#39;</span>); <span style="color:#75715e">// 普普通通的log，除錯好幫手
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Hello %s!&#39;</span>, <span style="color:#e6db74">&#39;Tom&#39;</span>); <span style="color:#75715e">// %s 其他語言也有的佔位符
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;%ctry some CSS&#39;</span>, <span style="color:#e6db74">&#39;font-size:50px; color: red;&#39;</span>); <span style="color:#75715e">// %c 套用CSS
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">warn</span>(<span style="color:#e6db74">&#39;Just warning for you, surprise!!&#39;</span>); <span style="color:#75715e">//黃色警告訊息
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">&#39;Give you some error ~&#39;</span>); <span style="color:#75715e">//紅色錯誤訊息
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">info</span>(<span style="color:#e6db74">&#39;It is time to feed fish.&#39;</span>); <span style="color:#75715e">// 提示訊息，不知道為啥沒看到藍色icon
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">assert</span>(<span style="color:#66d9ef">false</span>, <span style="color:#e6db74">&#39;Something wrong! Find it or die&#39;</span>); <span style="color:#75715e">// 前面放Boolean，可用條件判斷，false的話會跳出錯誤訊息
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">dom_p</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;p&#39;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">dom_p</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">dir</span>(<span style="color:#a6e22e">dom_p</span>); <span style="color:#75715e">// 顯示DOM節點的元素
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">count</span>(<span style="color:#e6db74">&#39;num&#39;</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">count</span>(<span style="color:#e6db74">&#39;num&#39;</span>); <span style="color:#75715e">//  數出指定的Label被count幾次，平常可以用來數事件觸發次數
</span></code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">dogs</span> <span style="color:#f92672">=</span> [{
  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Snickers&#39;</span>,
  <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>
}, {
  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;hugo&#39;</span>,
  <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">8</span>
}];

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">table</span>(<span style="color:#a6e22e">dogs</span>); <span style="color:#75715e">// 以Table的形式印出陣列或物件
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">dogs</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">dog</span>=&gt;{
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">group</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>); <span style="color:#75715e">// 以名字為群組依據
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`This is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> is </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">age</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> years old`</span>);
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> look like </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">age</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> years old`</span>);
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">groupEnd</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">dog</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
});

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">time</span>(<span style="color:#e6db74">&#39;Fetching data&#39;</span>); <span style="color:#75715e">// 開始計時，注意開始和結束的名字要一樣
</span><span style="color:#75715e"></span><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;https://randomuser.me/api/&#39;</span>)
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; <span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">json</span>())
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">timeEnd</span>(<span style="color:#e6db74">&#39;Fetching data&#39;</span>); <span style="color:#75715e">// 完成，計時停止，印出計時結果
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">data</span>);
  });
</code></pre></div><h2 id="day-10">Day 10</h2>
<p>這一天的主題是&quot;Hold Shift to Check Multiple Checkboxes&quot;，完美重現了shift的缺點，如果在沒有任何一個被勾選的情況下按著shift勾第二個，會把第二個和它後面全部選起來，總而言之改了很久，總算弄成比較直覺性的選取。</p>
<ul>
<li>使用情境：</li>
</ul>
<ol>
<li>想要選取1~3，按/沒按shift，選取1或3，再選另一個</li>
<li>還想選5~8，按/沒按shift，選取5或8，再選另一個</li>
<li>不要7~8，按著shift選7</li>
<li>不要2~3，按著shift選2</li>
</ol>
<ul>
<li>這四個步驟已經暴露出可能令人不滿的情況，分別是：</li>
</ul>
<ol>
<li>第二步按著shift的情況下，為什麼不是從4到被選的6中間都選起來呢?</li>
<li>第四步執行後會發現，為什麼2以下都被清空了?</li>
</ol>
<p>第一個讓人不滿的情況的原因是因為，我的作法主要解決了知道這個功能怎麼使用的人，可以正確的在第一步做到從1到5選取，因為是以1為起點，可以直覺地在不想要4和5的情況下按著shift選4，表示以4為起點後面都不要，等到下次再度使用時，可能是幾秒後也可能是幾分鐘後，一樣可以從第一個步驟開始，選取從起點到想要的位置。</p>
<p>第二個讓人不滿的情況則是因為，為了讓刪除的起點不會干擾到第一步設定的起點，所以統一做從上至下的刪除。</p>
<p>其實共通的原因是，第一步的選取給人一種選取群組的錯覺，不過世上沒有完美的解法，暫時就先這樣了。</p>
<h2 id="其他">其他</h2>
<p>解構賦值
[a,b] = [x, y]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//基本用法
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>] <span style="color:#75715e">// a = 1, b = 2
</span><span style="color:#75715e"></span>
<span style="color:#75715e">//先宣告後指定值，要用let才行
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>
[<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>]

<span style="color:#75715e">// 交換值
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
[<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">a</span>] <span style="color:#f92672">=</span> [<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>] <span style="color:#75715e">// a = 2, b = 1
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 略過某些值
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">a</span>, , <span style="color:#a6e22e">b</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>] <span style="color:#75715e">// a = 1, b = 3
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 其餘運算
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">a</span>, ...<span style="color:#a6e22e">b</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>] <span style="color:#75715e">// a = 1, b = [2,3]
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 失敗保護
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> [, , , <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>] <span style="color:#75715e">// a = undefined, b = undefined
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 多維複雜陣列
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">a</span>, [<span style="color:#a6e22e">b</span>, [<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">d</span>]]] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, [<span style="color:#ae81ff">2</span>, [[[<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>], <span style="color:#ae81ff">5</span>], <span style="color:#ae81ff">6</span>]]] <span style="color:#75715e">// c = [[3, 4], 5]
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 字串
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello&#34;</span>;
<span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">d</span>, <span style="color:#a6e22e">e</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">str</span>; <span style="color:#75715e">// [h, e, l, l o]
</span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>JS30-Day5 &amp; Day6</title>
            <link>https://mix-liten.github.io/posts/201805/js30-day5day6/</link>
            <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/js30-day5day6/</guid>
            <description>介紹Flex-Box 與 JavaScript原生Fetch用法
Day 5  Flex-Box 平常我會參考的兩個codepen連結 Flexbox Visual Playground Properties for the flex container   flex基本用法是在父層設定display: flex; 在子層設定flex: 1; 等同於flex: 1 1 0%; flex: flex-grow flex-shrink flex-basis; flex-grow，當子層寬度加總低於父層寬度時，依給予的數字做比例延伸 flex-shrink，當子層寬度加總高於父層寬度時，依給予的數字做比例縮減 flex-basis，基準值，若用auto，會以內容分配寬度
Day 6  fetch() MDN 的 Fetch 說明 會以Promise做回應，基本用法如下：  fetch(url) .then(res =&amp;gt; res.json()) .then(res =&amp;gt; console.log(res)) .catch(error =&amp;gt; console.error(error)); fetch(url, { method: &amp;#39;POST&amp;#39;, // or &amp;#39;PUT&amp;#39;  body: JSON.stringify(data), // data can be `string` or {object}!  headers: new Headers({ &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39; }) }); 用then接收Promise傳出的resolve(成功)，用catch接收Promise傳出的reject(失敗) 要注意的是fetch回傳出的是ReadableStream物件，簡單來說就是還要再處理一下才會變成可讀的資料，方法如下：</description>
            <content type="html"><![CDATA[<p>介紹Flex-Box 與 JavaScript原生Fetch用法</p>
<h2 id="day-5">Day 5</h2>
<ul>
<li>Flex-Box
平常我會參考的兩個codepen連結
<a href="https://codepen.io/frank890417/full/ayLvRp/">Flexbox Visual Playground</a>
<a href="https://codepen.io/enxaneta/full/adLPwv">Properties for the flex container</a></li>
</ul>
<hr>
<p>flex基本用法是在父層設定display: flex;
在子層設定flex: 1;
等同於flex: 1 1 0%;
flex: flex-grow flex-shrink flex-basis;
flex-grow，當<strong>子層寬度加總低於父層寬度</strong>時，依給予的數字做<strong>比例延伸</strong>
flex-shrink，當<strong>子層寬度加總高於父層寬度</strong>時，依給予的數字做<strong>比例縮減</strong>
flex-basis，基準值，若用auto，會以內容分配寬度</p>
<h2 id="day-6">Day 6</h2>
<ul>
<li>fetch()
<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">MDN 的 Fetch 說明</a>
會以Promise做回應，基本用法如下：</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span>)
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">res</span> =&gt; <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>())
  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">res</span> =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">res</span>))
  .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">error</span> =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">error</span>));

<span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span>, {
  <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;POST&#39;</span>, <span style="color:#75715e">// or &#39;PUT&#39;
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">data</span>), <span style="color:#75715e">// data can be `string` or {object}!
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Headers</span>({
    <span style="color:#e6db74">&#39;Content-Type&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;application/json&#39;</span>
  })
});
</code></pre></div><p>用then接收Promise傳出的resolve(成功)，用catch接收Promise傳出的reject(失敗)
要注意的是fetch回傳出的是ReadableStream物件，簡單來說就是還要再處理一下才會變成可讀的資料，方法如下：</p>
<ol>
<li>json()，輸出JSON</li>
<li>blob()，輸出<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">Blob</a></li>
<li>text()，輸出字串</li>
<li>formData()，輸出表格資料</li>
<li>arrayBuffer()，不能理解，附上<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">參考</a></li>
</ol>
<ul>
<li>Regular Expression (RegExp)</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">regexp</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RegExp(<span style="color:#a6e22e">pattern</span>, <span style="color:#a6e22e">attributes</span>);
<span style="color:#a6e22e">stringObject</span>.<span style="color:#a6e22e">match</span>(<span style="color:#a6e22e">regexp</span>);
<span style="color:#a6e22e">stringObject</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#a6e22e">regexp</span><span style="color:#f92672">/</span><span style="color:#a6e22e">substr</span>,<span style="color:#a6e22e">replacement</span>);
<span style="color:#a6e22e">stringObject</span>.<span style="color:#a6e22e">split</span>(<span style="color:#a6e22e">separator</span>,<span style="color:#a6e22e">howmany</span>);
</code></pre></div><p>參數pattern放想要驗證的規則字串
參數attributes也是放字串但內容限定是&rsquo;igm'，i代表不管大小寫都匹配，g代表找遍整個文件所有匹配的內容，m代表多行匹配但找到第一個就停止，三個字可依需求自選。
match()，輸出匹配的內容
replace()，代換匹配的部分
split()，分割成陣列，必須設定separator，howmany則是可選參數</p>
<ul>
<li>arrayObject.join(separator)
合併陣列值且會以參數separator做分隔</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>JS30-Day4 &amp; Day7</title>
            <link>https://mix-liten.github.io/posts/201805/js30-day4day7/</link>
            <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/js30-day4day7/</guid>
            <description>這兩個章節的內容主要在介紹Array在ES6裡的新語法，這篇文有點長，想更深入學習ES6可參考下方連結。 阮一峰 ECMAScript 6 入門
目錄  目錄  forEach filter map reduce sort some every find findIndex set 其他    forEach array.forEach(function(currentValue, index, arr), thisValue) currentValue，必要，當前項目 index，索引值 arr，代表正在被遍歷的陣列 thisValue，傳值進forEach，預設是this
const numbers = [1, 44, 12, 5, 26, 99]; numbers.forEach((item,index,arr) =&amp;gt; arr[index] = item * 3); console.log(numbers); // [3, 132, 36, 15, 78, 297] 不會回傳值，直接在遍歷時處理資料。
filter array.filter(function(currentValue,index,arr), thisValue)
const numbers = [1, 44, 12, 5, 26, 99]; const filterNumbers = numbers.</description>
            <content type="html"><![CDATA[<p>這兩個章節的內容主要在介紹Array在ES6裡的新語法，這篇文有點長，想更深入學習ES6可參考下方連結。
<a href="http://es6.ruanyifeng.com/">阮一峰 ECMAScript 6 入門</a></p>
<h2 id="目錄">目錄</h2>
<ul>
<li><a href="#%E7%9B%AE%E9%8C%84">目錄</a>
<ul>
<li><a href="#foreach">forEach</a></li>
<li><a href="#filter">filter</a></li>
<li><a href="#map">map</a></li>
<li><a href="#reduce">reduce</a></li>
<li><a href="#sort">sort</a></li>
<li><a href="#some">some</a></li>
<li><a href="#every">every</a></li>
<li><a href="#find">find</a></li>
<li><a href="#findindex">findIndex</a></li>
<li><a href="#set">set</a></li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a></li>
</ul>
</li>
</ul>
<h3 id="foreach">forEach</h3>
<p>array.forEach(function(currentValue, index, arr), thisValue)
currentValue，必要，當前項目
index，索引值
arr，代表正在被遍歷的陣列
thisValue，傳值進forEach，預設是this</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">forEach</span>((<span style="color:#a6e22e">item</span>,<span style="color:#a6e22e">index</span>,<span style="color:#a6e22e">arr</span>) =&gt; <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">index</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">item</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">numbers</span>); <span style="color:#75715e">// [3, 132, 36, 15, 78, 297]
</span></code></pre></div><p>不會回傳值，直接在遍歷時處理資料。</p>
<h3 id="filter">filter</h3>
<p>array.filter(function(currentValue,index,arr), thisValue)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">filterNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">20</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">filterNumbers</span>); <span style="color:#75715e">// [44, 26, 99]
</span></code></pre></div><p>顧名思義就是過濾，遍歷時符合條件才會被回傳出去組成新陣列。</p>
<h3 id="map">map</h3>
<p>array.map(function(currentValue,index,arr), thisValue)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mapNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">numbers</span>); <span style="color:#75715e">// [1, 44, 12, 5, 26, 99] 原陣列保持原樣
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">mapNumbers</span>); <span style="color:#75715e">// [6, 49, 17, 10, 31, 104]
</span></code></pre></div><p>看起來和forEach差不多對吧，不過map會回傳出新陣列，不會影響到原本的陣列。</p>
<h3 id="reduce">reduce</h3>
<p>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)
total，必要，代表起始值
currentValue，必要，當前項目
initialValue，設定起始值</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">reduceNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">reduce</span>((<span style="color:#a6e22e">accumulate</span>, <span style="color:#a6e22e">current</span>) =&gt; <span style="color:#a6e22e">accumulate</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">current</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">reduceNumbers</span>); <span style="color:#75715e">// 187
</span></code></pre></div><p>第一個參數會累加且傳入下一次運算，最後傳出這個累加值。</p>
<h3 id="sort">sort</h3>
<p>array.sort(sortfunction)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">sort</span>((<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) =&gt; <span style="color:#a6e22e">a</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">b</span>); <span style="color:#75715e">// 正數-&gt;小到大，負數-&gt;大到小，0-&gt;不改變
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">numbers</span>); <span style="color:#75715e">// [1, 5, 12, 26, 44, 99]
</span></code></pre></div><p>顧名思義就是排序，sortfunction傳出的值會影響排序結果，可用reverse()進行反轉。</p>
<h3 id="some">some</h3>
<p>array.some(function(currentValue,index,arr),thisValue)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">someNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">some</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">20</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">someNumbers</span>); <span style="color:#75715e">// true
</span></code></pre></div><p>回傳Boolean，陣列只要有一項符合規則就回傳True。</p>
<h3 id="every">every</h3>
<p>array.every(function(currentValue,index,arr), thisValue)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">everyNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">every</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">20</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">everyNumbers</span>); <span style="color:#75715e">// false
</span></code></pre></div><p>回傳Boolean，與some()的差別是陣列需要全部符合規則才回傳True。</p>
<h3 id="find">find</h3>
<p>array.find(function(currentValue, index, arr),thisValue)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">findNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">find</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">20</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">findNumbers</span>); <span style="color:#75715e">// 44
</span></code></pre></div><p>類似filter()，但只會回傳第一個符合條件的值就停止遍歷了。</p>
<h3 id="findindex">findIndex</h3>
<p>array.findIndex(function(currentValue, index, arr), thisValue)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">44</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">99</span>];
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">findIndexNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">findIndex</span>(<span style="color:#a6e22e">item</span> =&gt; <span style="color:#a6e22e">item</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">20</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">findIndexNumbers</span>); <span style="color:#75715e">// 1 此為陣列索引 實際是第二個
</span></code></pre></div><p>回傳第一個符合條件的值的索引的同時停止遍歷。</p>
<h3 id="set">set</h3>
<p>new Set([iterable])</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Set</span>([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>]);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">setNumbers</span> <span style="color:#f92672">=</span>  [...<span style="color:#a6e22e">numbers</span>];
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">numbers</span>); <span style="color:#75715e">// Set(5) {1, 2, 3, 4, 5}
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">setNumbers</span>); <span style="color:#75715e">// [1, 2, 3, 4, 5]
</span></code></pre></div><p>set本身是一種資料結構，配合Spread Operator(&hellip;)可以轉換成陣列值，set本身有個只會儲存唯一值的特性，平常想過濾掉重複的陣列內容可以用[&hellip;new Set(array)]。</p>
<h3 id="其他">其他</h3>
<ul>
<li>
<p>string/array.slice(start,end)
只傳入一個數字，slice(5)，代表從第六個開始保留到最後一個
傳入兩個數字，slice(5, 11)，代表從第六個開始保留到第十一個
可以切字串(String)也可以切陣列(Array)。</p>
</li>
<li>
<p>for&hellip;of</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">iterable</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>];

<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">value</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">iterable</span>) {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">value</span>);
}
<span style="color:#75715e">// 10
</span><span style="color:#75715e">// 20
</span><span style="color:#75715e">// 30
</span></code></pre></div><p>跟for&hellip;in不一的是會直接讀取裡面的值，且key = value。</p>
<ul>
<li>箭頭函式(Arrow functions)
這篇一直用就順帶說明一下</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">func</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">x</span>) { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> };
<span style="color:#75715e">// 等同於
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">func</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span> =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;global name&#39;</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">nameFunc</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;local name&#39;</span>,
  <span style="color:#a6e22e">callName</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () { 
    <span style="color:#75715e">// 注意，這裡是 function，以此為基準產生一個作用域
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#66d9ef">this</span>); <span style="color:#75715e">// 1 nameFunc object
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span>); <span style="color:#75715e">// 2 local name
</span><span style="color:#75715e"></span>  },
  <span style="color:#a6e22e">callName2</span><span style="color:#f92672">:</span> () =&gt; { 
    <span style="color:#75715e">// 注意，箭頭函式，this 指向物件所在的那一層
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#66d9ef">this</span>); <span style="color:#75715e">// 3 window object
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span>); <span style="color:#75715e">// 4 global name
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;5&#39;</span>, <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">nameFunc</span>); <span style="color:#75715e">// 5 local name
</span><span style="color:#75715e"></span>  }
};
<span style="color:#a6e22e">nameFunc</span>.<span style="color:#a6e22e">callName</span>();
<span style="color:#a6e22e">nameFunc</span>.<span style="color:#a6e22e">callName2</span>();
</code></pre></div><p>有幾個特性</p>
<ol>
<li>前面傳入的參數在只有一個的情況下不用小括號，沒有參數或複數參數就一定要小括號()</li>
<li>箭頭後面的部分如果只有一行，不需要大括號{}，且預設會return</li>
<li>this綁的位置和原本的function(){}不一樣，通常是建議有用到this就不要用箭頭函式</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>JS30-Day1 &amp; Day2 &amp; Day3</title>
            <link>https://mix-liten.github.io/posts/201805/js30-day1day2day3/</link>
            <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/js30-day1day2day3/</guid>
            <description>終於要認真把JS30看一遍、做一遍了，這個系列文我會把成果放在GitHub上，基本上不會完全照著影片做，會略作修改，有興趣可以去下載看看，文章只會紀錄我目前不熟的部分，非常推薦大家這個免費的線上課程，下方附上連結。 Javascript30
Day 1   element.addEventListener(event, function, useCapture) event放事件字串 function放偵聽到事件發生時要做的事 useCapture放boolean值，預設是false，事件會從內到外觸發(event bubbling)，設定為true則是從外到內(event capturing)。 冒泡、捕獲範例 範例也是用addEventListener做的
  element.classList 新增、刪除節點的class add(class1, class2, &amp;hellip;) remove(class1, class2, &amp;hellip;) 還有偵測是否存在這個class，存在則刪除、不存在則新增 toggle(class)
  在Day1的實作裡是偵聽keydown事件，但是壓著按鍵就會多次觸發，我自己則是用keyup，在離開按鍵的時候才觸發的感覺有點像音樂遊戲的延遲。
Day 2  setInterval(function, milliseconds) 每隔一段第二個參數設定的時間就會自動執行第一個參數傳入的方法，時間單位是毫秒(千分之一秒)。  CSS  transform-origin 通常在HTML裡的方向設定都是以左上角為基準點，這個CSS語法是配合transform使用，用來移動X、Y、Z軸的基準點，這個範例裡只設定一個100%讓X軸基準點移到最右邊。 transition-timing-function: cubic-bezier() 設定transition以貝茲曲線的方式轉場，可以在chrome的開發者工具直接拉線調整。  Day 3   dataset 讀取tag裡的data-*屬性
  style.setProperty(propertyName, value, priority)
  style.setProperty(&amp;#39;color&amp;#39;, &amp;#39;red&amp;#39;); // 等於 style.padding = &amp;#39;red&amp;#39;; </description>
            <content type="html"><![CDATA[<p>終於要認真把JS30看一遍、做一遍了，這個系列文我會把成果放在GitHub上，基本上不會完全照著影片做，會略作修改，有興趣可以去下載看看，文章只會紀錄我目前不熟的部分，非常推薦大家這個免費的線上課程，下方附上連結。
<a href="https://javascript30.com/">Javascript30</a></p>
<h2 id="day-1">Day 1</h2>
<ul>
<li>
<p>element.addEventListener(event, function, useCapture)
event放事件字串
function放偵聽到事件發生時要做的事
useCapture放boolean值，預設是false，事件會從內到外觸發(event bubbling)，設定為true則是從外到內(event capturing)。
<a href="https://codepen.io/anon/pen/ELRoNq">冒泡、捕獲範例</a>
範例也是用addEventListener做的</p>
</li>
<li>
<p>element.classList
新增、刪除節點的class
add(class1, class2, &hellip;)
remove(class1, class2, &hellip;)
還有偵測是否存在這個class，存在則刪除、不存在則新增
toggle(class)</p>
</li>
</ul>
<p>在Day1的實作裡是偵聽keydown事件，但是壓著按鍵就會多次觸發，我自己則是用keyup，在離開按鍵的時候才觸發的感覺有點像音樂遊戲的延遲。</p>
<h2 id="day-2">Day 2</h2>
<ul>
<li>setInterval(function, milliseconds)
每隔一段第二個參數設定的時間就會自動執行第一個參數傳入的方法，時間單位是毫秒(千分之一秒)。</li>
</ul>
<h4 id="css">CSS</h4>
<ul>
<li>transform-origin
通常在HTML裡的方向設定都是以左上角為基準點，這個CSS語法是配合transform使用，用來移動X、Y、Z軸的基準點，這個範例裡只設定一個100%讓X軸基準點移到最右邊。</li>
<li>transition-timing-function: cubic-bezier()
設定transition以貝茲曲線的方式轉場，可以在chrome的開發者工具直接拉線調整。</li>
</ul>
<h2 id="day-3">Day 3</h2>
<ul>
<li>
<p>dataset
讀取tag裡的data-*屬性</p>
</li>
<li>
<p>style.setProperty(propertyName, value, priority)</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">setProperty</span>(<span style="color:#e6db74">&#39;color&#39;</span>, <span style="color:#e6db74">&#39;red&#39;</span>);
<span style="color:#75715e">// 等於 
</span><span style="color:#75715e"></span><span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">padding</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>;
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Vue-工具-Vue CLI</title>
            <link>https://mix-liten.github.io/posts/201805/vue-%E5%B7%A5%E5%85%B7-vuecli/</link>
            <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201805/vue-%E5%B7%A5%E5%85%B7-vuecli/</guid>
            <description>本來第三篇要說關於Vue組件Global和Local的應用還有組件之間上下傳遞事件的方法，不過一想到就有點懶，暫時逃避一下，這篇先介紹一下最近在做作品用到的工具吧。
Vue-CLI GitHub連結
安裝 npm i vue-cli -g //安裝在global vue -V //看看版本 確定安裝好沒 提供六種起始樣板 vue list //檢視Available official templates vue init &amp;lt;樣板名稱&amp;gt; &amp;lt;專案名稱&amp;gt; //下載樣板 選好樣板初始化，基本上會先問一些問題，如：專案名、專案描述、專案作者、可選套件，可選套件看需求使用，等安裝好照著CMD給的提示執行開發伺服器，開發時沒有要改設定的話，基本上只會用到src資料夾，src裡還有assets、components資料夾，因為有內建vue-loader，可以直接使用副檔名是vue的單一組件(含template、script、style)放在components，assets則是靜態檔案，通常會放全域用的JS、CSS、圖片之類的，另外還有個很重要的router，繼續看下面吧。
Vue-router 說明文件
順便介紹同樣內建在裡面的vue-router，這東西的用途是可以把網頁做成單頁應用SPA(Single Page Application)，優點是頁面間切換很順暢，缺點是進網頁會讀久一點。
 挖空格放組件(router-view)  &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;Menu/&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;router-view/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;Footer/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import Menu from &amp;#39;./Menu&amp;#39;; import Footer from &amp;#39;./Footer&amp;#39;; export default{ components: { Menu, Footer, } } &amp;lt;/script&amp;gt; router-view tag 會塞入子組件的內容，menu和footer則是直接引入組件到Vue實例裡直接使用。
 組件之間的連結(router-link)  &amp;lt;router-link to=&amp;#34;about&amp;#34;&amp;gt;About&amp;lt;/router-link&amp;gt; 這句會被自動編譯成a連結。</description>
            <content type="html"><![CDATA[<p>本來第三篇要說關於Vue組件Global和Local的應用還有組件之間上下傳遞事件的方法，不過一想到就有點懶，暫時逃避一下，這篇先介紹一下最近在做作品用到的工具吧。</p>
<p><a href="https://github.com/vuejs/vue-cli">Vue-CLI GitHub連結</a></p>
<h3 id="安裝">安裝</h3>
<pre><code>npm i vue-cli -g //安裝在global

vue -V //看看版本 確定安裝好沒
</code></pre><h3 id="提供六種起始樣板">提供六種起始樣板</h3>
<pre><code>vue list //檢視Available official templates

vue init &lt;樣板名稱&gt; &lt;專案名稱&gt; //下載樣板
</code></pre><p><img src="/images/JS/Vue/vue-list.jpg" alt="六種樣板" title="Vue-list"></p>
<p>選好樣板初始化，基本上會先問一些問題，如：專案名、專案描述、專案作者、可選套件，可選套件看需求使用，等安裝好照著CMD給的提示執行開發伺服器，開發時沒有要改設定的話，基本上只會用到src資料夾，src裡還有assets、components資料夾，因為有內建vue-loader，可以直接使用副檔名是vue的單一組件(含template、script、style)放在components，assets則是靜態檔案，通常會放全域用的JS、CSS、圖片之類的，另外還有個很重要的router，繼續看下面吧。</p>
<p><a href="https://router.vuejs.org/zh-cn/">Vue-router 說明文件</a></p>
<p>順便介紹同樣內建在裡面的vue-router，這東西的用途是可以把網頁做成單頁應用SPA(Single Page Application)，優點是頁面間切換很順暢，缺點是進網頁會讀久一點。</p>
<ul>
<li>挖空格放組件(router-view)</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">template</span>&gt;
  &lt;<span style="color:#f92672">div</span>&gt;
    &lt;<span style="color:#f92672">Menu</span>/&gt;
    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
      &lt;<span style="color:#f92672">router-view</span>/&gt;
    &lt;/<span style="color:#f92672">div</span>&gt;
    &lt;<span style="color:#f92672">Footer</span>/&gt;
  &lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">template</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Menu</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./Menu&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Footer</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./Footer&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span>{
  <span style="color:#a6e22e">components</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">Menu</span>,
    <span style="color:#a6e22e">Footer</span>,
  }
}
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>router-view tag 會塞入子組件的內容，menu和footer則是直接引入組件到Vue實例裡直接使用。</p>
<ul>
<li>組件之間的連結(router-link)</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">router-link</span> <span style="color:#a6e22e">to</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;about&#34;</span>&gt;About&lt;/<span style="color:#f92672">router-link</span>&gt;
</code></pre></div><p>這句會被自動編譯成a連結。</p>
<ul>
<li>router設定</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// router.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Vue</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vue&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">VueRouter</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vue-router&#39;</span>;

<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">App</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./App.vue&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">About</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./about.vue&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Grocery</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./grocery.vue&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">GroceryList</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./groceryList&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">GroceryDetail</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./groceryDetail&#39;</span>;

<span style="color:#a6e22e">Vue</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">VueRouter</span>);

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">VueRouter</span>({
  <span style="color:#a6e22e">routes</span><span style="color:#f92672">:</span> [
    {
      <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/&#39;</span>,
      <span style="color:#a6e22e">component</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">App</span>,
      <span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> [
        { <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;about&#39;</span>, <span style="color:#a6e22e">component</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">About</span>},
        {
          <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;grocery&#39;</span>,
          <span style="color:#a6e22e">component</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Grocery</span>,
          <span style="color:#a6e22e">children</span><span style="color:#f92672">:</span> [
            {<span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#a6e22e">component</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">GroceryList</span>},
            {<span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;:id?&#39;</span>, <span style="color:#a6e22e">component</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">GroceryDetail</span>}, <span style="color:#75715e">// 用this.$route.params.id 對應
</span><span style="color:#75715e"></span>          ],
        },
        { <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;*&#39;</span>, <span style="color:#a6e22e">redirect</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;grocery&#39;</span> },
      ],
    }
  ],
})
</code></pre></div><p>上面的範例有首頁和首頁下的關於和商品頁，商品頁下有商品清單和商品詳細，另外預防使用者隨便打網址的情況下轉址到商品頁。
另外path可以加上一些正規表達式，id後面的問號是表達0個或1個，意思是id可以有也可以沒有。</p>
<h3 id="延伸閱讀">延伸閱讀</h3>
<p><a href="https://blog.techbridge.cc/2017/09/16/frontend-backend-mvc/">前後端分離與 SPA</a></p>
]]></content>
        </item>
        
        <item>
            <title>Vue-筆記-2-模板</title>
            <link>https://mix-liten.github.io/posts/201804/vue-%E7%AD%86%E8%A8%98-2-%E6%A8%A1%E6%9D%BF/</link>
            <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201804/vue-%E7%AD%86%E8%A8%98-2-%E6%A8%A1%E6%9D%BF/</guid>
            <description>模板語言 Vue template (官網說法 指令 Directives)  v-text  &amp;lt;span v-text=&amp;#34;msg&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;{{msg}}&amp;lt;/span&amp;gt; 兩種寫法都可以。 v-html  &amp;lt;div v-html=&amp;#34;html&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 如果想要動態插入內容，使用innerHTML是拿不到實例中的data的喔。 v-show  &amp;lt;h1 v-show=&amp;#34;show&amp;#34;&amp;gt;Hello!&amp;lt;/h1&amp;gt; 等於CSS裡的display。 v-if, v-else-if, v-else  &amp;lt;div v-if=&amp;#34;type === &amp;#39;A&amp;#39;&amp;#34;&amp;gt;A&amp;lt;/div&amp;gt; &amp;lt;div v-else-if=&amp;#34;type === &amp;#39;B&amp;#39;&amp;#34;&amp;gt;B&amp;lt;/div&amp;gt; &amp;lt;div v-else&amp;gt;Not A/B&amp;lt;/div&amp;gt; v-if 和 v-show 的差別是在條件不成立的情況下，v-if不會被渲染到網頁上，v-show則是單純看不到。 v-for &amp;lt;!-- Array --&amp;gt; &amp;lt;li v-for=&amp;#34;todo in todos&amp;#34; v-if=&amp;#34;todo.isComplete&amp;#34;&amp;gt; {{ todo }} &amp;lt;/li&amp;gt; &amp;lt;div v-for=&amp;#34;(todo, index) in todos&amp;#34;&amp;gt; {{ index }}: {{ todo }} &amp;lt;/div&amp;gt; &amp;lt;!-- Object --&amp;gt; &amp;lt;div v-for=&amp;#34;value in object&amp;#34;&amp;gt; {{ value }} &amp;lt;/div&amp;gt; &amp;lt;div v-for=&amp;#34;(value, key) in object&amp;#34;&amp;gt; {{ key }}: {{ value }} &amp;lt;/div&amp;gt; &amp;lt;div v-for=&amp;#34;(value, key, index) in object&amp;#34;&amp;gt; {{ index }}.</description>
            <content type="html"><![CDATA[<h2 id="模板語言-vue-template-官網說法-指令-directives">模板語言 Vue template (官網說法 指令 Directives)</h2>
<ol>
<li>v-text</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">  &lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">v-text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;msg&#34;</span>&gt;&lt;/<span style="color:#f92672">span</span>&gt;
  &lt;<span style="color:#f92672">span</span>&gt;{{msg}}&lt;/<span style="color:#f92672">span</span>&gt;
</code></pre></div><p>兩種寫法都可以。
<!-- raw HTML omitted --></p>
<ol start="2">
<li>v-html</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-html</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;html&#34;</span>&gt;&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>如果想要動態插入內容，使用innerHTML是拿不到實例中的data的喔。
<!-- raw HTML omitted --></p>
<ol start="3">
<li>v-show</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">  &lt;<span style="color:#f92672">h1</span> <span style="color:#a6e22e">v-show</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;show&#34;</span>&gt;Hello!&lt;/<span style="color:#f92672">h1</span>&gt;
</code></pre></div><p>等於CSS裡的display。
<!-- raw HTML omitted --></p>
<ol start="4">
<li>v-if, v-else-if, v-else</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;type === &#39;A&#39;&#34;</span>&gt;A&lt;/<span style="color:#f92672">div</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-else-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;type === &#39;B&#39;&#34;</span>&gt;B&lt;/<span style="color:#f92672">div</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-else</span>&gt;Not A/B&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>v-if 和 v-show 的差別是在條件不成立的情況下，v-if不會被渲染到網頁上，v-show則是單純看不到。
<!-- raw HTML omitted --></p>
<ol start="5">
<li>v-for
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- Array --&gt;</span>
&lt;<span style="color:#f92672">li</span> <span style="color:#a6e22e">v-for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;todo in todos&#34;</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;todo.isComplete&#34;</span>&gt;
  {{ todo }}
&lt;/<span style="color:#f92672">li</span>&gt;

&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;(todo, index) in todos&#34;</span>&gt;
  {{ index }}: {{ todo }}
&lt;/<span style="color:#f92672">div</span>&gt;

<span style="color:#75715e">&lt;!-- Object --&gt;</span>
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;value in object&#34;</span>&gt;
  {{ value }}
&lt;/<span style="color:#f92672">div</span>&gt;

&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;(value, key) in object&#34;</span>&gt;
  {{ key }}: {{ value }}
&lt;/<span style="color:#f92672">div</span>&gt;

&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-for</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;(value, key, index) in object&#34;</span>&gt;
  {{ index }}. {{ key }}: {{ value }}
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div></li>
</ol>
<pre><code>注意v-for的優先度比v-if高，所以放在同一層的話，可以有條件的印出內容。
&lt;br/&gt;

6. v-model 雙向綁定
  -   限制 只能用在
  1.  input
  2.  select
  3.  textarea
  4.  components
  -   修飾符
  1.  .lazy 監聽事件用blur取代預設的change
  2.  .trim 過濾頭尾空格
  3.  .number 輸入字符串轉為數字型別
&lt;br/&gt;

7. v-bind(**：**)
  {% raw %}
  標籤的屬性不能使用{{class}}，應使用v-bind
  {% endraw %}
  ```html
      &lt;a :href=&quot;url&quot; :title.prop=&quot;hint&quot;&gt;link&lt;/a&gt;
      &lt;svg :view-box.camel=&quot;viewBox&quot;&gt;&lt;/svg&gt;
  ```
  -   修飾符
  1.  .prop 從綁定HTML元素的屬性(attribute)改成DOM的屬性(property)
  2.  .camel 將kebab-case命名法，轉換成camelCase命名法(駝峰式)，因vue-loader內建，就不用加這個修飾符
  3.  .sync 對prop做雙向綁定，子組件改變時，會更新到父組件
&lt;br/&gt;

8. v-on(**@**)
  ```html
  &lt;input @keydown.enter=&quot;onEnter&quot;&gt;
  &lt;input @keydown.13=&quot;onEnter&quot;&gt;
  ```
  -   修飾符
  1.  .stop = event.stopPropagation()，阻止JS預設的事件傳遞方向**向上冒泡(event bubbling)**
  2.  .prevent = event.preventDefault()，阻止HTML元素預設事件
  3.  .{keyCode | keyAlias}，如範例，可用keyCode或按鍵名做事件觸發
  4.  [.left, .middle, .right]，分別是滑鼠的左鍵、中鍵、右鍵觸發
  5.  .once，只能觸發一次
  6.  .self，只在有事件監聽的HTML元素本身觸發(不含子元素)
  7.  .capture，將JS預設的事件傳遞方向**向上冒泡(event bubbling)**改為**向下捕獲(event capturing)**
  8.  .passive，以{ passive : true }的模式增加事件監聽，意思是會無視preventDefault()，用來解決滾動和點擊事件的瞬間卡頓
  9.  .native，監聽組件根元素的原生事件
&lt;br/&gt;

9. v-pre
  ```html
      &lt;span v-pre&gt;{{ this will not be compiled }}&lt;/span&gt;
  ```
  加上v-pre的部分，不會被編譯
&lt;br/&gt;

10. v-cloak
  ```html
      &lt;div v-cloak&gt;
          {{ message }}
      &lt;/div&gt;
      &lt;style&gt;
      [v-cloak] {
          display: none;
      }
      &lt;/style&gt;
  ```
  讓等待渲染資料的地方不顯示{{data}}，直到渲染為止。
&lt;br/&gt;

11. v-once
  ```html
      &lt;span v-once&gt;This will never change: {{msg}}&lt;/span&gt;
  ```
  只渲染一次，用在父層會影響到子層。
&lt;br/&gt;

### 特例 
圖片不能用v-model綁定，必須使用v-on:change綁定。
```html
&lt;div id=&quot;app&quot;&gt;
&lt;input type=&quot;file&quot; @change='fileSelected'&gt;
&lt;img v-if=&quot;image&quot; :src=&quot;image&quot; width=&quot;300&quot;&gt;
&lt;/div&gt;
&lt;script&gt;
const vm = new Vue({
  el: &quot;#app&quot;,
  data: {
      image: ''
  },
  methods: {
      imageLoaded(e){
          this.image = e.target.result;
      },
      fileSelected(e){
          const file = e.target.files.item(0);
          const reader = new FileReader();
          reader.addEventListener('load', this.imageLoaded);
          reader.readAsDataURL(file);
      }
  }
})
&lt;/script&gt;
</code></pre><h3 id="實作">實作</h3>
<p>簡單的做個 TodoList 吧！
<a href="https://codepen.io/anon/pen/xjEjGr?editors=1010">CodePen連結</a></p>
]]></content>
        </item>
        
        <item>
            <title>Vue-筆記-1-Vue實例</title>
            <link>https://mix-liten.github.io/posts/201804/vue-%E7%AD%86%E8%A8%98-1-vue%E5%AF%A6%E4%BE%8B/</link>
            <pubDate>Tue, 24 Apr 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201804/vue-%E7%AD%86%E8%A8%98-1-vue%E5%AF%A6%E4%BE%8B/</guid>
            <description>實例 new Vue({})   el
 &amp;lsquo;#app&amp;rsquo; document.getElementById(&amp;lsquo;app&amp;rsquo;) 在實例外用 vm.$mount(&#39;#app&#39;)     data
const vm = new Vue({ el: &amp;#39;#app&amp;#39;, data: { input: &amp;#39;&amp;#39;, todos: [ &amp;#39;刷牙洗臉&amp;#39;, &amp;#39;吃早餐&amp;#39;, &amp;#39;整理服裝儀容&amp;#39;, &amp;#39;確認今天該做的事&amp;#39; ] } }); 用this.todos取得data裡的todos陣列   computed
&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;number&amp;#34; v-model=&amp;#34;a&amp;#34;/&amp;gt; + &amp;lt;input type=&amp;#34;number&amp;#34; v-model=&amp;#34;b&amp;#34;/&amp;gt; = &amp;lt;input type=&amp;#34;number&amp;#34; v-model=&amp;#34;sum&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var vm = new Vue ({ el: &amp;#39;#app&amp;#39;, data: { a: 0, b: 0 }, computed: { sum() { return parseInt(this.</description>
            <content type="html"><![CDATA[<h2 id="實例-new-vue">實例 new Vue({})</h2>
<ol>
<li>
<p>el</p>
<ul>
<li>&lsquo;#app&rsquo;</li>
<li>document.getElementById(&lsquo;app&rsquo;)</li>
<li>在實例外用 vm.$mount('#app')
<!-- raw HTML omitted --></li>
</ul>
</li>
<li>
<p>data</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">vm</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span>({
    <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
    <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">input</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>,
        <span style="color:#a6e22e">todos</span><span style="color:#f92672">:</span> [
            <span style="color:#e6db74">&#39;刷牙洗臉&#39;</span>,
            <span style="color:#e6db74">&#39;吃早餐&#39;</span>,
            <span style="color:#e6db74">&#39;整理服裝儀容&#39;</span>,
            <span style="color:#e6db74">&#39;確認今天該做的事&#39;</span>
        ]
    }
});
</code></pre></div><p>用this.todos取得data裡的todos陣列
<!-- raw HTML omitted --></p>
</li>
<li>
<p>computed</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;app&#34;</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;number&#34;</span> <span style="color:#a6e22e">v-model</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;a&#34;</span>/&gt;
    +
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;number&#34;</span> <span style="color:#a6e22e">v-model</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;b&#34;</span>/&gt;
    =
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;number&#34;</span> <span style="color:#a6e22e">v-model</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sum&#34;</span>/&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">vm</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span> ({
    <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
    <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>,
        <span style="color:#a6e22e">b</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>
    },
    <span style="color:#a6e22e">computed</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">sum</span>() {
            <span style="color:#66d9ef">return</span> parseInt(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">a</span>, <span style="color:#ae81ff">10</span>) <span style="color:#f92672">+</span> parseInt(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">b</span>, <span style="color:#ae81ff">10</span>);
        }
    }
});
<span style="color:#75715e">/*  sum() {...} 也可以寫成
</span><span style="color:#75715e">    sum: {
</span><span style="color:#75715e">        get() {
</span><span style="color:#75715e">            return parseInt(this.a, 10) + parseInt(this.b, 10);
</span><span style="color:#75715e">        },
</span><span style="color:#75715e">        set(value) {
</span><span style="color:#75715e">            this.b = parseInt(val, 10) - parseInt(this.a, 10);
</span><span style="color:#75715e">        }
</span><span style="color:#75715e">    }
</span><span style="color:#75715e">    前面一般的函式寫法會等於物件寫法的get()，而另一個set(val)的功能是設定值，範例設定的是，當有a值和sum值時，會自動計算b值。
</span><span style="color:#75715e">*/</span>
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>回傳計算後的結果，可以用this.sum取得
<!-- raw HTML omitted --></p>
</li>
<li>
<p>methods</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;app&#34;</span>&gt;
    &lt;<span style="color:#f92672">p</span>&gt;Reversed message: &#34;{{ reverseMessage() }}&#34;&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">vm</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span>({
        <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
        <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Hello Vue!&#39;</span>
        },
        <span style="color:#a6e22e">methods</span><span style="color:#f92672">:</span> {
            <span style="color:#a6e22e">reverseMessage</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> () {
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">message</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;&#39;</span>).<span style="color:#a6e22e">reverse</span>().<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39;&#39;</span>)
        }
    }
    })
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><ul>
<li>
<p>methods 和 computed 的差別是，computed只有在相依的data改變時才會重新計算，methods則是只要data有改變，不管有沒有在methods中用到都會重新計算。</p>
</li>
<li>
<p>methods 也可以直接寫在代換位置的地方，{% raw %}如上面的範例可以把{{ reverseMessage() }}  改成<!-- raw HTML omitted -->{{ message.split('').reverse().join('') }}
{% endraw %}
<!-- raw HTML omitted --></p>
</li>
</ul>
</li>
<li>
<p>filters</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;app&#34;</span>&gt;
    &lt;<span style="color:#f92672">span</span>&gt;{{ text | toUpperCase }}&lt;/<span style="color:#f92672">span</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">vm</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span> ({
    <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
    <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">text</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;hello vue&#39;</span>
    },
    <span style="color:#a6e22e">filters</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">toUpperCase</span>(<span style="color:#a6e22e">value</span>) {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">toUpperCase</span>();
        }
    }
});
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><ul>
<li>可以用&quot; | &ldquo;符號串聯多個過濾器</li>
<li>有點像computed，不過沒有cache，刷新頁面會重複計算，效能比較差。
<!-- raw HTML omitted --></li>
</ul>
</li>
<li>
<p>watch</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;app&#34;</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">v-model</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;input.a&#34;</span> /&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">vm</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span> ({
    <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
    <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">input</span><span style="color:#f92672">:</span> {
            <span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>
        }
    },
    <span style="color:#a6e22e">watch</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">input</span><span style="color:#f92672">:</span>{
            <span style="color:#a6e22e">handler</span>(<span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">oldVal</span>){
                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">oldVal</span>.<span style="color:#a6e22e">a</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> -&gt; </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">val</span>.<span style="color:#a6e22e">a</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
            },
            <span style="color:#a6e22e">immediate</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
            <span style="color:#a6e22e">deep</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
        }
    }
});
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><ul>
<li>immediate 打開網頁時，立刻執行一次</li>
<li>deep 偵測物件或陣列中值的改變
<!-- raw HTML omitted --></li>
</ul>
</li>
<li>
<p>components</p>
<ul>
<li>全域(global)
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;app&#34;</span>&gt;
    &lt;<span style="color:#f92672">my-component</span>&gt;&lt;/<span style="color:#f92672">my-component</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
    <span style="color:#a6e22e">Vue</span>.<span style="color:#a6e22e">component</span>(<span style="color:#e6db74">&#39;my-component&#39;</span>, {
        <span style="color:#a6e22e">template</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&lt;div&gt;this is my component&lt;/div&gt;&#39;</span>
    });
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">vm</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span>({
        <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>
    });
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div></li>
<li>本地(local)</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;app&#34;</span>&gt;
    &lt;<span style="color:#f92672">my-component</span>&gt;&lt;/<span style="color:#f92672">my-component</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
&lt;<span style="color:#f92672">script</span>&gt;
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">vm</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Vue</span>({
        <span style="color:#a6e22e">el</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#app&#39;</span>,
        <span style="color:#a6e22e">components</span><span style="color:#f92672">:</span> {
            <span style="color:#e6db74">&#39;my-component&#39;</span><span style="color:#f92672">:</span> {
                <span style="color:#a6e22e">template</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&lt;div&gt;this is my component&lt;/div&gt;&#39;</span>
            }
        }
    })
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><ul>
<li>為了讓組件(component)可以重複利用，data必須是函式，回傳出不同的物件</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">    &lt;<span style="color:#f92672">script</span>&gt;
        <span style="color:#a6e22e">Vue</span>.<span style="color:#a6e22e">component</span>(<span style="color:#e6db74">&#39;my-component&#39;</span>, {
            <span style="color:#a6e22e">data</span>(){
                <span style="color:#66d9ef">return</span> {
                    <span style="color:#a6e22e">count</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>
                }
            },
            <span style="color:#a6e22e">template</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`
</span><span style="color:#e6db74">                &lt;div&gt;
</span><span style="color:#e6db74">                    &lt;h1&gt;{{count}}&lt;/h1&gt;
</span><span style="color:#e6db74">                    &lt;button @click=&#34;count+=1&#34;&gt;+1&lt;/button&gt;
</span><span style="color:#e6db74">                &lt;/div&gt;
</span><span style="color:#e6db74">                `</span>
            })
    &lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><p>組件管理很重要呦，後面會再介紹。
<!-- raw HTML omitted --></p>
</li>
<li>
<p>Lifecycle Hooks
<img src="/images/JS/Vue/lifecycle.png" alt="Instance Lifecycle" title="Lifecycle"></p>
<ul>
<li>圖片上紅色的部分都可以進行操作</li>
<li>通常AJAX的部分會放在mounted</li>
<li>將實例Destroyed的話，已經存在的會保留，但不能再進行操作
<!-- raw HTML omitted --></li>
</ul>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>CS-關於IP</title>
            <link>https://mix-liten.github.io/posts/201804/cs-%E9%97%9C%E6%96%BCip/</link>
            <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
            
            <guid>https://mix-liten.github.io/posts/201804/cs-%E9%97%9C%E6%96%BCip/</guid>
            <description>值得紀念的第一篇文章，想要紀錄一下剛學到的電腦科學(Computer Science)小知識。
大家都知道網路(Network)有IP位置(Internet Protocol Address)用來區別每家網路位置，目前常見的是使用IPv4(Internet Protocol version 4)，這種協定可以提供2³²個位置(總共4,294,967,296)，實際上還會少一些等等再說，所以整個地球有多少人在使用網路，總有一天IPv4位置會不夠用，於是幾年前已經有IPv6，IPv6的設計目的是取代IPv4，簡單來說你根本不必去操心這些，IP位址多到你一天換一個都沒問題。
簡單的解說一下上面這張圖，現在都已經2018年了，家裡沒網路的應該很少，首先你的電腦IP位址(169.174.141.10)，還有一個子網域遮罩(Subnet mask)(255.255.255.240)，但是你家網路不一定只有你一台電腦在用，其它電腦的IP則可能是169.174.141.5之類的，為什麼只差最後一個數字呢，因為子網域遮罩把你家網路分成16份，而為什麼是16份?
先來說明為什麼IP有兩種表示方法，中間那堆0和1組成的8個數字為一組的，每一組都是一個 8-bit 的二進位數字，也可以叫&amp;quot;八位元組(octet)&amp;quot;，簡單來說就是[128,64,32,16,8,4,2,1]，如果數字是[1,0,1,0,1,0,0,1]，代到前面那邊會得到128+32+8+1=169。
稍微瞭解一下8-bit之後，再來看子網域遮罩，它的用途就是切割網路，1代表遮住，0代表不遮，遮住的部分是你家真正的IP位置，也就是169.174.141.0，然後不遮的地方是你家能用的子網域，總共是最後四碼，也就是2⁴=16個，但是為什麼後面又說能用的只有14個?
因為第一個，是網路位置(169.174.141.0)，它是你家網路實際上的位置，你用了別人就不能分了，然後最後一個，則是廣播位置(169.174.141.15)，它的功用可以想像成總控制室，簡單來說就是桌面的&amp;quot;網路芳鄰&amp;quot;,每一台電腦在連上網路後,會把自己的網路資訊用廣播位址傳給所有電腦,所以你才能在點開網路芳鄰後,看到家裡所有的電腦。
大概就是這樣，我畢竟不熟硬體，只瞭解個大概，如果有錯誤，歡迎大大指正，以免別人也學到錯誤的觀念。</description>
            <content type="html"><![CDATA[<p>值得紀念的第一篇文章，想要紀錄一下剛學到的電腦科學(Computer Science)小知識。</p>
<p>大家都知道網路(Network)有IP位置(Internet Protocol Address)用來區別每家網路位置，目前常見的是使用IPv4(Internet Protocol version 4)，這種協定可以提供2³²個位置(總共4,294,967,296)，實際上還會少一些等等再說，所以整個地球有多少人在使用網路，總有一天IPv4位置會不夠用，於是幾年前已經有IPv6，IPv6的設計目的是取代IPv4，簡單來說你根本不必去操心這些，IP位址多到你一天換一個都沒問題。</p>
<p><img src="/images/CS/IPv4.jpg" alt="IPv4" title="IPv4"></p>
<p>簡單的解說一下上面這張圖，現在都已經2018年了，家裡沒網路的應該很少，首先你的電腦IP位址(169.174.141.10)，還有一個子網域遮罩(Subnet mask)(255.255.255.240)，但是你家網路不一定只有你一台電腦在用，其它電腦的IP則可能是169.174.141.5之類的，為什麼只差最後一個數字呢，因為子網域遮罩把你家網路分成16份，而為什麼是16份?</p>
<p>先來說明為什麼IP有兩種表示方法，中間那堆0和1組成的8個數字為一組的，每一組都是一個 8-bit 的二進位數字，也可以叫&quot;八位元組(octet)&quot;，簡單來說就是[128,64,32,16,8,4,2,1]，如果數字是[1,0,1,0,1,0,0,1]，代到前面那邊會得到128+32+8+1=169。</p>
<p>稍微瞭解一下8-bit之後，再來看子網域遮罩，它的用途就是切割網路，1代表遮住，0代表不遮，遮住的部分是你家真正的IP位置，也就是169.174.141.0，然後不遮的地方是你家能用的子網域，總共是最後四碼，也就是2⁴=16個，但是為什麼後面又說能用的只有14個?</p>
<p>因為第一個，是網路位置(169.174.141.0)，它是你家網路實際上的位置，你用了別人就不能分了，然後最後一個，則是廣播位置(169.174.141.15)，它的功用可以想像成總控制室，簡單來說就是桌面的&quot;網路芳鄰&quot;,每一台電腦在連上網路後,會把自己的網路資訊用廣播位址傳給所有電腦,所以你才能在點開網路芳鄰後,看到家裡所有的電腦。</p>
<p>大概就是這樣，我畢竟不熟硬體，只瞭解個大概，如果有錯誤，歡迎大大指正，以免別人也學到錯誤的觀念。</p>
]]></content>
        </item>
        
    </channel>
</rss>
